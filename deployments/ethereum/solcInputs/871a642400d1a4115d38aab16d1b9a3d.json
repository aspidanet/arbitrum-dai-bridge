{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/solidity-examples/contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(\n                0x40,\n                and(\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n                    not(31) // Round down to the nearest 32 bytes.\n                )\n            )\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00), and(mload(mc), mask)))\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint _start,\n        uint _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1, \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint _start) internal pure returns (uint) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                    // the next line is the loop condition:\n                    // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {\n\n                        } eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/libraries/ExcessivelySafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.7.6;\n\nlibrary ExcessivelySafeCall {\n    uint constant LOW_28_MASK = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeCall(\n        address _target,\n        uint _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal returns (bool, bytes memory) {\n        // set up for assembly call\n        uint _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                0, // ether value\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /// @notice Use when you _really_ really _really_ don't trust the called\n    /// contract. This prevents the called contract from causing reversion of\n    /// the caller in as many ways as we can.\n    /// @dev The main difference between this and a solidity low-level call is\n    /// that we limit the number of bytes that the callee can cause to be\n    /// copied to caller memory. This prevents stupid things like malicious\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\n    /// to memory.\n    /// @param _target The address to call\n    /// @param _gas The amount of gas to forward to the remote contract\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\n    /// to memory.\n    /// @param _calldata The data to send to the remote contract\n    /// @return success and returndata, as `.call()`. Returndata is capped to\n    /// `_maxCopy` bytes.\n    function excessivelySafeStaticCall(\n        address _target,\n        uint _gas,\n        uint16 _maxCopy,\n        bytes memory _calldata\n    ) internal view returns (bool, bytes memory) {\n        // set up for assembly call\n        uint _toCopy;\n        bool _success;\n        bytes memory _returnData = new bytes(_maxCopy);\n        // dispatch message to recipient\n        // by assembly calling \"handle\" function\n        // we call via assembly to avoid memcopying a very large returndata\n        // returned by a malicious contract\n        assembly {\n            _success := staticcall(\n                _gas, // gas\n                _target, // recipient\n                add(_calldata, 0x20), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n            // limit our copy to 256 bytes\n            _toCopy := returndatasize()\n            if gt(_toCopy, _maxCopy) {\n                _toCopy := _maxCopy\n            }\n            // Store the length of the copied bytes\n            mstore(_returnData, _toCopy)\n            // copy the bytes from returndata[0:_toCopy]\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\n        }\n        return (_success, _returnData);\n    }\n\n    /**\n     * @notice Swaps function selectors in encoded contract calls\n     * @dev Allows reuse of encoded calldata for functions with identical\n     * argument types but different names. It simply swaps out the first 4 bytes\n     * for the new selector. This function modifies memory in place, and should\n     * only be used with caution.\n     * @param _newSelector The new 4-byte selector\n     * @param _buf The encoded contract args\n     */\n    function swapSelector(bytes4 _newSelector, bytes memory _buf) internal pure {\n        require(_buf.length >= 4);\n        uint _mask = LOW_28_MASK;\n        assembly {\n            // load the first word of\n            let _word := mload(add(_buf, 0x20))\n            // mask out the top 4 bytes\n            // /x\n            _word := and(_word, _mask)\n            _word := or(_newSelector, _word)\n            mstore(add(_buf, 0x20), _word)\n        }\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ILayerZeroUserApplicationConfig.sol\";\n\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\n    // @param _dstChainId - the destination chain identifier\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\n    // @param _payload - a custom bytes payload to send to the destination contract\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\n    function send(\n        uint16 _dstChainId,\n        bytes calldata _destination,\n        bytes calldata _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes calldata _adapterParams\n    ) external payable;\n\n    // @notice used by the messaging library to publish verified payload\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source contract (as bytes) at the source chain\n    // @param _dstAddress - the address on destination chain\n    // @param _nonce - the unbound message ordering nonce\n    // @param _gasLimit - the gas limit for external contract execution\n    // @param _payload - verified payload to send to the destination contract\n    function receivePayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        address _dstAddress,\n        uint64 _nonce,\n        uint _gasLimit,\n        bytes calldata _payload\n    ) external;\n\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\n\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\n    // @param _srcAddress - the source chain contract address\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\n\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\n    // @param _dstChainId - the destination chain identifier\n    // @param _userApplication - the user app address on this EVM chain\n    // @param _payload - the custom message to send over LayerZero\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\n    function estimateFees(\n        uint16 _dstChainId,\n        address _userApplication,\n        bytes calldata _payload,\n        bool _payInZRO,\n        bytes calldata _adapterParam\n    ) external view returns (uint nativeFee, uint zroFee);\n\n    // @notice get this Endpoint's immutable source identifier\n    function getChainId() external view returns (uint16);\n\n    // @notice the interface to retry failed message on this Endpoint destination\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    // @param _payload - the payload to be retried\n    function retryPayload(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        bytes calldata _payload\n    ) external;\n\n    // @notice query if any STORED payload (message blocking) at the endpoint.\n    // @param _srcChainId - the source chain identifier\n    // @param _srcAddress - the source chain contract address\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\n\n    // @notice query if the _libraryAddress is valid for sending msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the _libraryAddress is valid for receiving msgs.\n    // @param _userApplication - the user app address on this EVM chain\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\n\n    // @notice query if the non-reentrancy guard for send() is on\n    // @return true if the guard is on. false otherwise\n    function isSendingPayload() external view returns (bool);\n\n    // @notice query if the non-reentrancy guard for receive() is on\n    // @return true if the guard is on. false otherwise\n    function isReceivingPayload() external view returns (bool);\n\n    // @notice get the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _userApplication - the contract address of the user application\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address _userApplication,\n        uint _configType\n    ) external view returns (bytes memory);\n\n    // @notice get the send() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getSendVersion(address _userApplication) external view returns (uint16);\n\n    // @notice get the lzReceive() LayerZero messaging library version\n    // @param _userApplication - the contract address of the user application\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroReceiver {\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\n    // @param _srcChainId - the source endpoint identifier\n    // @param _srcAddress - the source sending contract address from the source chain\n    // @param _nonce - the ordered message nonce\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\ninterface ILayerZeroUserApplicationConfig {\n    // @notice set the configuration of the LayerZero messaging library of the specified version\n    // @param _version - messaging library version\n    // @param _chainId - the chainId for the pending config change\n    // @param _configType - type of configuration. every messaging library has its own convention.\n    // @param _config - configuration in the bytes. can encode arbitrary content.\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external;\n\n    // @notice set the send() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setSendVersion(uint16 _version) external;\n\n    // @notice set the lzReceive() LayerZero messaging library version to _version\n    // @param _version - new messaging library version\n    function setReceiveVersion(uint16 _version) external;\n\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\n    // @param _srcChainId - the chainId of the source chain\n    // @param _srcAddress - the contract address of the source contract at the source chain\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ILayerZeroReceiver.sol\";\nimport \"./interfaces/ILayerZeroUserApplicationConfig.sol\";\nimport \"./interfaces/ILayerZeroEndpoint.sol\";\nimport \"../libraries/BytesLib.sol\";\n\n/*\n * a generic LzReceiver implementation\n */\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\n    using BytesLib for bytes;\n\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\n    uint public constant DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\n\n    ILayerZeroEndpoint public immutable lzEndpoint;\n    mapping(uint16 => bytes) public trustedRemoteLookup;\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\n    address public precrime;\n\n    event SetPrecrime(address precrime);\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\n\n    constructor(address _endpoint) {\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\n    }\n\n    function lzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual override {\n        // lzReceive must be called by the endpoint for security\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\n\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\n        require(\n            _srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote),\n            \"LzApp: invalid source sending contract\"\n        );\n\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function _lzSend(\n        uint16 _dstChainId,\n        bytes memory _payload,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams,\n        uint _nativeFee\n    ) internal virtual {\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\n        _checkPayloadSize(_dstChainId, _payload.length);\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\n    }\n\n    function _checkGasLimit(\n        uint16 _dstChainId,\n        uint16 _type,\n        bytes memory _adapterParams,\n        uint _extraGas\n    ) internal view virtual {\n        uint providedGasLimit = _getGasLimit(_adapterParams);\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type];\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\n        require(providedGasLimit >= minGasLimit + _extraGas, \"LzApp: gas limit is too low\");\n    }\n\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\n        require(_adapterParams.length >= 34, \"LzApp: invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\n        if (payloadSizeLimit == 0) {\n            // use default if not set\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\n        }\n        require(_payloadSize <= payloadSizeLimit, \"LzApp: payload size is too large\");\n    }\n\n    //---------------------------UserApplication config----------------------------------------\n    function getConfig(\n        uint16 _version,\n        uint16 _chainId,\n        address,\n        uint _configType\n    ) external view returns (bytes memory) {\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\n    }\n\n    // generic config for LayerZero user Application\n    function setConfig(\n        uint16 _version,\n        uint16 _chainId,\n        uint _configType,\n        bytes calldata _config\n    ) external override onlyOwner {\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\n    }\n\n    function setSendVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setSendVersion(_version);\n    }\n\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\n        lzEndpoint.setReceiveVersion(_version);\n    }\n\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\n    }\n\n    // _path = abi.encodePacked(remoteAddress, localAddress)\n    // this function set the trusted path for the cross-chain communication\n    function setTrustedRemote(uint16 _remoteChainId, bytes calldata _path) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = _path;\n        emit SetTrustedRemote(_remoteChainId, _path);\n    }\n\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\n    }\n\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\n        require(path.length != 0, \"LzApp: no trusted path record\");\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\n    }\n\n    function setPrecrime(address _precrime) external onlyOwner {\n        precrime = _precrime;\n        emit SetPrecrime(_precrime);\n    }\n\n    function setMinDstGas(\n        uint16 _dstChainId,\n        uint16 _packetType,\n        uint _minGas\n    ) external onlyOwner {\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\n    }\n\n    // if the size is 0, it means default size limit\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\n        payloadSizeLimitLookup[_dstChainId] = _size;\n    }\n\n    //--------------------------- VIEW FUNCTION ----------------------------------------\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\n        return keccak256(trustedSource) == keccak256(_srcAddress);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./LzApp.sol\";\nimport \"../libraries/ExcessivelySafeCall.sol\";\n\n/*\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\n */\nabstract contract NonblockingLzApp is LzApp {\n    using ExcessivelySafeCall for address;\n\n    constructor(address _endpoint) LzApp(_endpoint) {}\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\n\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\n\n    // overriding the virtual function in LzReceiver\n    function _blockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual override {\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\n            gasleft(),\n            150,\n            abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload)\n        );\n        // try-catch all errors/exceptions\n        if (!success) {\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\n        }\n    }\n\n    function _storeFailedMessage(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload,\n        bytes memory _reason\n    ) internal virtual {\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\n    }\n\n    function nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public virtual {\n        // only internal transaction\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n    }\n\n    //@notice override this function\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual;\n\n    function retryMessage(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes calldata _payload\n    ) public payable virtual {\n        // assert there is message to retry\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\n        // clear the stored message\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\n        // execute the message. revert if it fails again\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\n    }\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/BaseOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./OFTCoreV2.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nabstract contract BaseOFTV2 is OFTCoreV2, ERC165, IOFTV2 {\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) OFTCoreV2(_sharedDecimals, _lzEndpoint) {}\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function sendFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        LzCallParams calldata _callParams\n    ) public payable virtual override {\n        _send(_from, _dstChainId, _toAddress, _amount, _callParams.refundAddress, _callParams.zroPaymentAddress, _callParams.adapterParams);\n    }\n\n    function sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        LzCallParams calldata _callParams\n    ) public payable virtual override {\n        _sendAndCall(\n            _from,\n            _dstChainId,\n            _toAddress,\n            _amount,\n            _payload,\n            _dstGasForCall,\n            _callParams.refundAddress,\n            _callParams.zroPaymentAddress,\n            _callParams.adapterParams\n        );\n    }\n\n    /************************************************************************\n     * public view functions\n     ************************************************************************/\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IOFTV2).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    function estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return _estimateSendFee(_dstChainId, _toAddress, _amount, _useZro, _adapterParams);\n    }\n\n    function estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes calldata _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes calldata _adapterParams\n    ) public view virtual override returns (uint nativeFee, uint zroFee) {\n        return _estimateSendAndCallFee(_dstChainId, _toAddress, _amount, _payload, _dstGasForCall, _useZro, _adapterParams);\n    }\n\n    function circulatingSupply() public view virtual override returns (uint);\n\n    function token() public view virtual override returns (address);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface IOFTReceiverV2 {\n    /**\n     * @dev Called by the OFT contract when tokens are received from source chain.\n     * @param _srcChainId The chain id of the source chain.\n     * @param _srcAddress The address of the OFT token contract on the source chain.\n     * @param _nonce The nonce of the transaction on the source chain.\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\n     * @param _amount The amount of tokens to transfer.\n     * @param _payload Additional data with no specified format.\n     */\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\n\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\n}\n"
    },
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/OFTCoreV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../../lzApp/NonblockingLzApp.sol\";\nimport \"../../../libraries/ExcessivelySafeCall.sol\";\nimport \"./interfaces/ICommonOFT.sol\";\nimport \"./interfaces/IOFTReceiverV2.sol\";\n\nabstract contract OFTCoreV2 is NonblockingLzApp {\n    using BytesLib for bytes;\n    using ExcessivelySafeCall for address;\n\n    uint public constant NO_EXTRA_GAS = 0;\n\n    // packet type\n    uint8 public constant PT_SEND = 0;\n    uint8 public constant PT_SEND_AND_CALL = 1;\n\n    uint8 public immutable sharedDecimals;\n\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bool))) public creditedPackets;\n\n    /**\n     * @dev Emitted when `_amount` tokens are moved from the `_sender` to (`_dstChainId`, `_toAddress`)\n     * `_nonce` is the outbound nonce\n     */\n    event SendToChain(uint16 indexed _dstChainId, address indexed _from, bytes32 indexed _toAddress, uint _amount);\n\n    /**\n     * @dev Emitted when `_amount` tokens are received from `_srcChainId` into the `_toAddress` on the local chain.\n     * `_nonce` is the inbound nonce.\n     */\n    event ReceiveFromChain(uint16 indexed _srcChainId, address indexed _to, uint _amount);\n\n    event CallOFTReceivedSuccess(uint16 indexed _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _hash);\n\n    event NonContractAddress(address _address);\n\n    // _sharedDecimals should be the minimum decimals on all chains\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {\n        sharedDecimals = _sharedDecimals;\n    }\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function callOnOFTReceived(\n        uint16 _srcChainId,\n        bytes calldata _srcAddress,\n        uint64 _nonce,\n        bytes32 _from,\n        address _to,\n        uint _amount,\n        bytes calldata _payload,\n        uint _gasForCall\n    ) public virtual {\n        require(_msgSender() == address(this), \"OFTCore: caller must be OFTCore\");\n\n        // send\n        _amount = _transferFrom(address(this), _to, _amount);\n        emit ReceiveFromChain(_srcChainId, _to, _amount);\n\n        // call\n        IOFTReceiverV2(_to).onOFTReceived{gas: _gasForCall}(_srcChainId, _srcAddress, _nonce, _from, _amount, _payload);\n    }\n\n    /************************************************************************\n     * internal functions\n     ************************************************************************/\n    function _estimateSendFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bool _useZro,\n        bytes memory _adapterParams\n    ) internal view virtual returns (uint nativeFee, uint zroFee) {\n        // mock the payload for sendFrom()\n        bytes memory payload = _encodeSendPayload(_toAddress, _ld2sd(_amount));\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function _estimateSendAndCallFee(\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes memory _payload,\n        uint64 _dstGasForCall,\n        bool _useZro,\n        bytes memory _adapterParams\n    ) internal view virtual returns (uint nativeFee, uint zroFee) {\n        // mock the payload for sendAndCall()\n        bytes memory payload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(_amount), _payload, _dstGasForCall);\n        return lzEndpoint.estimateFees(_dstChainId, address(this), payload, _useZro, _adapterParams);\n    }\n\n    function _nonblockingLzReceive(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual override {\n        uint8 packetType = _payload.toUint8(0);\n\n        if (packetType == PT_SEND) {\n            _sendAck(_srcChainId, _srcAddress, _nonce, _payload);\n        } else if (packetType == PT_SEND_AND_CALL) {\n            _sendAndCallAck(_srcChainId, _srcAddress, _nonce, _payload);\n        } else {\n            revert(\"OFTCore: unknown packet type\");\n        }\n    }\n\n    function _send(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) internal virtual returns (uint amount) {\n        _checkGasLimit(_dstChainId, PT_SEND, _adapterParams, NO_EXTRA_GAS);\n\n        (amount, ) = _removeDust(_amount);\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount); // amount returned should not have dust\n        require(amount > 0, \"OFTCore: amount too small\");\n\n        bytes memory lzPayload = _encodeSendPayload(_toAddress, _ld2sd(amount));\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\n    }\n\n    function _sendAck(\n        uint16 _srcChainId,\n        bytes memory,\n        uint64,\n        bytes memory _payload\n    ) internal virtual {\n        (address to, uint64 amountSD) = _decodeSendPayload(_payload);\n        if (to == address(0)) {\n            to = address(0xdead);\n        }\n\n        uint amount = _sd2ld(amountSD);\n        amount = _creditTo(_srcChainId, to, amount);\n\n        emit ReceiveFromChain(_srcChainId, to, amount);\n    }\n\n    function _sendAndCall(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount,\n        bytes memory _payload,\n        uint64 _dstGasForCall,\n        address payable _refundAddress,\n        address _zroPaymentAddress,\n        bytes memory _adapterParams\n    ) internal virtual returns (uint amount) {\n        _checkGasLimit(_dstChainId, PT_SEND_AND_CALL, _adapterParams, _dstGasForCall);\n\n        (amount, ) = _removeDust(_amount);\n        amount = _debitFrom(_from, _dstChainId, _toAddress, amount);\n        require(amount > 0, \"OFTCore: amount too small\");\n\n        // encode the msg.sender into the payload instead of _from\n        bytes memory lzPayload = _encodeSendAndCallPayload(msg.sender, _toAddress, _ld2sd(amount), _payload, _dstGasForCall);\n        _lzSend(_dstChainId, lzPayload, _refundAddress, _zroPaymentAddress, _adapterParams, msg.value);\n\n        emit SendToChain(_dstChainId, _from, _toAddress, amount);\n    }\n\n    function _sendAndCallAck(\n        uint16 _srcChainId,\n        bytes memory _srcAddress,\n        uint64 _nonce,\n        bytes memory _payload\n    ) internal virtual {\n        (bytes32 from, address to, uint64 amountSD, bytes memory payloadForCall, uint64 gasForCall) = _decodeSendAndCallPayload(_payload);\n\n        bool credited = creditedPackets[_srcChainId][_srcAddress][_nonce];\n        uint amount = _sd2ld(amountSD);\n\n        // credit to this contract first, and then transfer to receiver only if callOnOFTReceived() succeeds\n        if (!credited) {\n            amount = _creditTo(_srcChainId, address(this), amount);\n            creditedPackets[_srcChainId][_srcAddress][_nonce] = true;\n        }\n\n        if (!_isContract(to)) {\n            emit NonContractAddress(to);\n            return;\n        }\n\n        // workaround for stack too deep\n        uint16 srcChainId = _srcChainId;\n        bytes memory srcAddress = _srcAddress;\n        uint64 nonce = _nonce;\n        bytes memory payload = _payload;\n        bytes32 from_ = from;\n        address to_ = to;\n        uint amount_ = amount;\n        bytes memory payloadForCall_ = payloadForCall;\n\n        // no gas limit for the call if retry\n        uint gas = credited ? gasleft() : gasForCall;\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(\n            gasleft(),\n            150,\n            abi.encodeWithSelector(this.callOnOFTReceived.selector, srcChainId, srcAddress, nonce, from_, to_, amount_, payloadForCall_, gas)\n        );\n\n        if (success) {\n            bytes32 hash = keccak256(payload);\n            emit CallOFTReceivedSuccess(srcChainId, srcAddress, nonce, hash);\n        } else {\n            // store the failed message into the nonblockingLzApp\n            _storeFailedMessage(srcChainId, srcAddress, nonce, payload, reason);\n        }\n    }\n\n    function _isContract(address _account) internal view returns (bool) {\n        return _account.code.length > 0;\n    }\n\n    function _ld2sd(uint _amount) internal view virtual returns (uint64) {\n        uint amountSD = _amount / _ld2sdRate();\n        require(amountSD <= type(uint64).max, \"OFTCore: amountSD overflow\");\n        return uint64(amountSD);\n    }\n\n    function _sd2ld(uint64 _amountSD) internal view virtual returns (uint) {\n        return _amountSD * _ld2sdRate();\n    }\n\n    function _removeDust(uint _amount) internal view virtual returns (uint amountAfter, uint dust) {\n        dust = _amount % _ld2sdRate();\n        amountAfter = _amount - dust;\n    }\n\n    function _encodeSendPayload(bytes32 _toAddress, uint64 _amountSD) internal view virtual returns (bytes memory) {\n        return abi.encodePacked(PT_SEND, _toAddress, _amountSD);\n    }\n\n    function _decodeSendPayload(bytes memory _payload) internal view virtual returns (address to, uint64 amountSD) {\n        require(_payload.toUint8(0) == PT_SEND && _payload.length == 41, \"OFTCore: invalid payload\");\n\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\n        amountSD = _payload.toUint64(33);\n    }\n\n    function _encodeSendAndCallPayload(\n        address _from,\n        bytes32 _toAddress,\n        uint64 _amountSD,\n        bytes memory _payload,\n        uint64 _dstGasForCall\n    ) internal view virtual returns (bytes memory) {\n        return abi.encodePacked(PT_SEND_AND_CALL, _toAddress, _amountSD, _addressToBytes32(_from), _dstGasForCall, _payload);\n    }\n\n    function _decodeSendAndCallPayload(bytes memory _payload)\n        internal\n        view\n        virtual\n        returns (\n            bytes32 from,\n            address to,\n            uint64 amountSD,\n            bytes memory payload,\n            uint64 dstGasForCall\n        )\n    {\n        require(_payload.toUint8(0) == PT_SEND_AND_CALL, \"OFTCore: invalid payload\");\n\n        to = _payload.toAddress(13); // drop the first 12 bytes of bytes32\n        amountSD = _payload.toUint64(33);\n        from = _payload.toBytes32(41);\n        dstGasForCall = _payload.toUint64(73);\n        payload = _payload.slice(81, _payload.length - 81);\n    }\n\n    function _addressToBytes32(address _address) internal pure virtual returns (bytes32) {\n        return bytes32(uint(uint160(_address)));\n    }\n\n    function _debitFrom(\n        address _from,\n        uint16 _dstChainId,\n        bytes32 _toAddress,\n        uint _amount\n    ) internal virtual returns (uint);\n\n    function _creditTo(\n        uint16 _srcChainId,\n        address _toAddress,\n        uint _amount\n    ) internal virtual returns (uint);\n\n    function _transferFrom(\n        address _from,\n        address _to,\n        uint _amount\n    ) internal virtual returns (uint);\n\n    function _ld2sdRate() internal view virtual returns (uint);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\nimport \"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC5267Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267Upgradeable {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\n\nimport \"./ERC20PermitUpgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\n\nimport \"./IERC20PermitUpgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/ContextUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n    function __ERC20Burnable_init() internal onlyInitializing {\n    }\n\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/cryptography/EIP712Upgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 51\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __EIP712_init_unchained(name, \"1\");\n    }\n\n    function __ERC20Permit_init_unchained(string memory) internal onlyInitializing {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../utils/SafeERC20Upgradeable.sol\";\nimport \"../../../interfaces/IERC4626Upgradeable.sol\";\nimport \"../../../utils/math/MathUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n *\n * _Available since v4.7._\n */\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\n    using MathUpgradeable for uint256;\n\n    IERC20Upgradeable private _asset;\n    uint8 private _underlyingDecimals;\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    function __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\n        __ERC4626_init_unchained(asset_);\n    }\n\n    function __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual override returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual override returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\n        return _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\n        require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../interfaces/IERC5267Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:storage-size 52\n */\nabstract contract EIP712Upgradeable is Initializable, IERC5267Upgradeable {\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /// @custom:oz-renamed-from _HASHED_NAME\n    bytes32 private _hashedName;\n    /// @custom:oz-renamed-from _HASHED_VERSION\n    bytes32 private _hashedVersion;\n\n    string private _name;\n    string private _version;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        _name = name;\n        _version = version;\n\n        // Reset prior values in storage if upgrading\n        _hashedName = 0;\n        _hashedVersion = 0;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator();\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\n        require(_hashedName == 0 && _hashedVersion == 0, \"EIP712: Uninitialized\");\n\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Name() internal virtual view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712Version() internal virtual view returns (string memory) {\n        return _version;\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\n     */\n    function _EIP712NameHash() internal view returns (bytes32) {\n        string memory name = _EIP712Name();\n        if (bytes(name).length > 0) {\n            return keccak256(bytes(name));\n        } else {\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\n            bytes32 hashedName = _hashedName;\n            if (hashedName != 0) {\n                return hashedName;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\n     */\n    function _EIP712VersionHash() internal view returns (bytes32) {\n        string memory version = _EIP712Version();\n        if (bytes(version).length > 0) {\n            return keccak256(bytes(version));\n        } else {\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\n            bytes32 hashedVersion = _hashedVersion;\n            if (hashedVersion != 0) {\n                return hashedVersion;\n            } else {\n                return keccak256(\"\");\n            }\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[48] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable2Step.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Ownable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2Step is Ownable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1967.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(ITransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(ITransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(ITransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        ITransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev Interface for {TransparentUpgradeableProxy}. In order to implement transparency, {TransparentUpgradeableProxy}\n * does not implement this interface directly, and some of its functions are implemented by an internal dispatch\n * mechanism. The compiler is unaware that these functions are implemented by {TransparentUpgradeableProxy} and will not\n * include them in the ABI so this interface must be used to interact with it.\n */\ninterface ITransparentUpgradeableProxy is IERC1967 {\n    function admin() external view returns (address);\n\n    function implementation() external view returns (address);\n\n    function changeAdmin(address) external;\n\n    function upgradeTo(address) external;\n\n    function upgradeToAndCall(address, bytes memory) external payable;\n}\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n *\n * NOTE: The real interface of this proxy is that defined in `ITransparentUpgradeableProxy`. This contract does not\n * inherit from that interface, and instead the admin functions are implicitly implemented using a custom dispatch\n * mechanism in `_fallback`. Consequently, the compiler will not produce an ABI for this contract. This is necessary to\n * fully implement transparency without decoding reverts caused by selector clashes between the proxy and the\n * implementation.\n *\n * WARNING: It is not recommended to extend this contract to add additional external functions. If you do so, the compiler\n * will not check that there are no selector conflicts, due to the note above. A selector clash between any new function\n * and the functions declared in {ITransparentUpgradeableProxy} will be resolved in favor of the new one. This could\n * render the admin operations inaccessible, which could prevent upgradeability. Transparency may also be compromised.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(address _logic, address admin_, bytes memory _data) payable ERC1967Proxy(_logic, _data) {\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     *\n     * CAUTION: This modifier is deprecated, as it could cause issues if the modified function has arguments, and the\n     * implementation provides a function with the same selector.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev If caller is the admin process the call internally, otherwise transparently fallback to the proxy behavior\n     */\n    function _fallback() internal virtual override {\n        if (msg.sender == _getAdmin()) {\n            bytes memory ret;\n            bytes4 selector = msg.sig;\n            if (selector == ITransparentUpgradeableProxy.upgradeTo.selector) {\n                ret = _dispatchUpgradeTo();\n            } else if (selector == ITransparentUpgradeableProxy.upgradeToAndCall.selector) {\n                ret = _dispatchUpgradeToAndCall();\n            } else if (selector == ITransparentUpgradeableProxy.changeAdmin.selector) {\n                ret = _dispatchChangeAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.admin.selector) {\n                ret = _dispatchAdmin();\n            } else if (selector == ITransparentUpgradeableProxy.implementation.selector) {\n                ret = _dispatchImplementation();\n            } else {\n                revert(\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n            }\n            assembly {\n                return(add(ret, 0x20), mload(ret))\n            }\n        } else {\n            super._fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function _dispatchAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address admin = _getAdmin();\n        return abi.encode(admin);\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function _dispatchImplementation() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address implementation = _implementation();\n        return abi.encode(implementation);\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _dispatchChangeAdmin() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newAdmin = abi.decode(msg.data[4:], (address));\n        _changeAdmin(newAdmin);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     */\n    function _dispatchUpgradeTo() private returns (bytes memory) {\n        _requireZeroValue();\n\n        address newImplementation = abi.decode(msg.data[4:], (address));\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     */\n    function _dispatchUpgradeToAndCall() private returns (bytes memory) {\n        (address newImplementation, bytes memory data) = abi.decode(msg.data[4:], (address, bytes));\n        _upgradeToAndCall(newImplementation, data, true);\n\n        return \"\";\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * CAUTION: This function is deprecated. Use {ERC1967Upgrade-_getAdmin} instead.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev To keep this contract fully transparent, all `ifAdmin` functions must be payable. This helper is here to\n     * emulate some proxy functions being non-payable while still allowing value to pass through.\n     */\n    function _requireZeroValue() private {\n        require(msg.value == 0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/aETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\n\nimport \"./library/PauseGuardian.sol\";\nimport \"./library/Manable.sol\";\nimport \"./library/Minter.sol\";\n\n/**\n * @title Aspida's ether pegged ERC20 token\n * @notice This contract is used to create an ether pegged ERC20 token\n * @dev This contract extends multiple OpenZeppelin contracts to add additional functionality.\n * @author Aspida engineer\n */\ncontract aETH is Ownable2StepUpgradeable, PauseGuardian, ERC20PermitUpgradeable, Manable, Minter {\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     */\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Initializes the aETH contract.\n     * @dev This function should be called only once to initialize aETH.\n     * It initializes the contract as Ownable, sets the name and symbol of the token, and initializes the permit functionality.\n     * @param _name The name of the token.\n     * @param _symbol The symbol of the token.\n     */\n    function initialize(string memory _name, string memory _symbol) public initializer {\n        __Ownable2Step_init();\n        __ERC20_init(_name, _symbol);\n        __ERC20Permit_init(_name);\n    }\n\n    /**\n     * @dev Unpauses the aETH contract.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _open() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Pauses the aETH contract.\n     * @notice This function can only be called by the pause guardian.\n     */\n    function _close() external onlyPauseGuardian {\n        _pause();\n    }\n\n    /**\n     * @dev Adds a new pause guardian.\n     * @param _pauseGuardian The address of the pause guardian to be added.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _addPauseGuardian(address _pauseGuardian) external onlyOwner {\n        _addPauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @dev Removes a pause guardian.\n     * @param _pauseGuardian The address of the pause guardian to be removed.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _removePauseGuardian(address _pauseGuardian) external onlyOwner {\n        _removePauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Adds a new manager.\n     * @param _manager The address of the manager to be added.\n     * @dev If the manager has not been added before, emits a `ManagerAdded` event.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _addManager(address _manager) external onlyOwner {\n        _addManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Removes a manager.\n     * @param _manager The address of the manager to be removed.\n     * @dev If the manager is currently a manager, emits a `ManagerRemoved` event.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _removeManager(address _manager) external onlyOwner {\n        _removeManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Sets the minting cap for a minter.\n     * @param _minter The address of the minter.\n     * @param _mintCap The new minting cap for the minter.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _setMinterCap(address _minter, uint256 _mintCap) external onlyOwner {\n        _setMinterCapInternal(_minter, _mintCap);\n    }\n\n    /**\n     * @dev Hook function called before any token transfer.\n     * @param from The address transferring the tokens.\n     * @param to The address receiving the tokens.\n     * @param amount The amount of tokens being transferred.\n     * @notice This function checks if the token is paused before allowing the transfer.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\n        require(!paused(), \"_beforeTokenTransfer: token transfer while paused\");\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    /**\n     * @notice Mints new tokens and assigns them to the specified receiver.\n     * @param _receiver The address to receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @notice This function can only be called by a manager.\n     */\n    function mint(address _receiver, uint256 _amount) external onlyManager {\n        _mint(_receiver, _amount);\n    }\n\n    /**\n     * @notice Mints new tokens and assigns them to the specified receiver.\n     * @param _receiver The address to receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @dev This function checks if the minting cap is not exceeded before minting.\n     */\n    function minterMint(address _receiver, uint256 _amount) external checkMintCap(_amount) {\n        _increaseMintAmount(msg.sender, _amount);\n        _mint(_receiver, _amount);\n    }\n\n    /**\n     * @notice Burns tokens from the sender's balance.\n     * @param _amount The amount of tokens to burn.\n     * @dev This function decreases the minting amount for the sender before burning.\n     */\n    function minterBurn(uint256 _amount) external {\n        _decreaseMintAmount(msg.sender, _amount);\n        _burn(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Burns tokens from a specified account.\n     * @param _account The account to burn tokens from.\n     * @param _amount The amount of tokens to burn.\n     * @dev This function allows burning tokens from another account if the sender has the necessary allowance.\n     */\n    function burnFrom(address _account, uint256 _amount) external onlyManager {\n        address _sender = msg.sender;\n        if (_sender != _account) _spendAllowance(_account, _sender, _amount);\n        _burn(_account, _amount);\n    }\n\n    /**\n     * @notice Checks if an address is a pause guardian.\n     * @param _pauseGuardian The address to check.\n     * @return A boolean indicating whether the address is a pause guardian.\n     */\n    function isPauseGuardian(address _pauseGuardian) public view override returns (bool) {\n        return PauseGuardian.isPauseGuardian(_pauseGuardian) || _pauseGuardian == owner();\n    }\n}\n"
    },
    "contracts/core/ActionControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Aspida's ActionControl module\n * @author Aspida engineer\n * @dev This contract manages the limits and thresholds for actions such as submitting and withdrawing.\n */\nabstract contract ActionControl {\n    enum Action {\n        submit,\n        withdraw\n    }\n\n    struct ActionData {\n        uint256 limit; // The maximum amount allowed for an action\n        uint256 threshold; // The minimum amount required for an action\n        uint256 latestIndex; // The latest index of the action\n        uint256 accumulated; // The accumulated amount of the action\n    }\n\n    /**\n     * @dev This mapping stores the action data for each action.\n     * The key is the Action enum value, and the value is an ActionData struct.\n     */\n    mapping(Action => ActionData) internal actionDatas_;\n\n    /**\n     * @dev Emitted when the \"limit\" of \"actionId\" changes.\n     */\n    event SetActionLimit(Action actionId, uint256 limit);\n    /**\n     * @dev Emitted when the \"threshold\" of \"actionId\" changes.\n     */\n\n    event SetActionThreshold(Action actionId, uint256 threshold);\n    /**\n     * @dev Emitted when the \"index\" and \"accumulated\" of \"actionId\" are updated.\n     */\n\n    event UpdateActionData(Action actionId, uint256 index, uint256 accumulated);\n\n    /**\n     * @dev Sets the limit for an action\n     * @param _actionId The ID of the action\n     * @param _limit The maximum amount allowed for the action\n     */\n    function _setActionLimitInternal(Action _actionId, uint256 _limit) internal {\n        ActionData storage _actionData = actionDatas_[_actionId];\n        require(_limit != _actionData.limit, \"_setActionLimitInternal: Cannot set the same value\");\n\n        _actionData.limit = _limit;\n        emit SetActionLimit(_actionId, _limit);\n    }\n\n    /**\n     * @dev Sets the threshold for an action\n     * @param _actionId The ID of the action\n     * @param _threshold The minimum amount required for the action\n     */\n    function _setActionThresholdInternal(Action _actionId, uint256 _threshold) internal {\n        ActionData storage _actionData = actionDatas_[_actionId];\n        require(_threshold != _actionData.threshold, \"_setActionThresholdInternal: Cannot set the same value\");\n\n        _actionData.threshold = _threshold;\n        emit SetActionThreshold(_actionId, _threshold);\n    }\n\n    /**\n     * @dev Checks if the limit for an action has been exceeded\n     * @param _actionData The action data\n     * @param _actionId The ID of the action\n     * @param _index The index of the action\n     * @param _increase The increase in the action\n     * @param _accumulated The accumulated amount of the action\n     */\n    function _checkActionLimit(\n        ActionData storage _actionData,\n        Action _actionId,\n        uint256 _index,\n        uint256 _increase,\n        uint256 _accumulated\n    ) internal {\n        if (_actionData.limit > 0) {\n            uint256 _accumulatedPerIndex;\n            if (_index == _actionData.latestIndex) _accumulatedPerIndex = _accumulated - _actionData.accumulated;\n\n            if (_index != _actionData.latestIndex) {\n                _actionData.latestIndex = _index;\n                _actionData.accumulated = _accumulated;\n                emit UpdateActionData(_actionId, _index, _accumulated);\n            }\n\n            require(_accumulatedPerIndex + _increase <= _actionData.limit, \"_checkActionLimit: Limit exceeded\");\n        }\n    }\n\n    /**\n     * @dev Checks if the limit for an action has been exceeded\n     * @param _actionId The ID of the action\n     * @param _index The index of the action\n     * @param _increase The increase in the action\n     * @param _accumulated The accumulated amount of the action\n     */\n    function _checkActionLimit(Action _actionId, uint256 _index, uint256 _increase, uint256 _accumulated) internal {\n        _checkActionLimit(actionDatas_[_actionId], _actionId, _index, _increase, _accumulated);\n    }\n\n    /**\n     * @dev Checks if the threshold for an action has been met\n     * @param _actionData The action data\n     * @param _amount The amount to check against the threshold\n     */\n    function _checkActionThreshold(ActionData storage _actionData, uint256 _amount) internal view {\n        require(_amount >= _actionData.threshold, \"_checkActionThreshold: Amount exceeds threshold\");\n    }\n\n    /**\n     * @dev Checks if the threshold for an action has been met\n     * @param _actionId The ID of the action\n     * @param _amount The amount to check against the threshold\n     */\n    function _checkActionThreshold(Action _actionId, uint256 _amount) internal view {\n        _checkActionThreshold(actionDatas_[_actionId], _amount);\n    }\n\n    /**\n     * @dev Checks if an action has been exceeded or met its threshold\n     * @param _actionId The ID of the action\n     * @param _index The index of the action\n     * @param _increase The increase in the action\n     * @param _accumulated The accumulated amount of the action\n     */\n    function _checkAction(Action _actionId, uint256 _index, uint256 _increase, uint256 _accumulated) internal {\n        ActionData storage _actionData = actionDatas_[_actionId];\n        _checkActionLimit(_actionData, _actionId, _index, _increase, _accumulated);\n        _checkActionThreshold(_actionData, _increase);\n    }\n\n    /**\n     * @dev Returns the action data for an action\n     * @param _actionId The ID of the action\n     */\n    function actionData(Action _actionId) external view returns (ActionData memory) {\n        return actionDatas_[_actionId];\n    }\n\n    /**\n     * @dev Returns the remaining amount for an action\n     * @param _actionId The ID of the action\n     */\n    function actionRemaining(Action _actionId, uint256 _index, uint256 _accumulated) public view returns (uint256) {\n        ActionData storage _actionData = actionDatas_[_actionId];\n        if (_actionData.limit > 0) {\n            if (_index != _actionData.latestIndex) return _actionData.limit;\n            uint256 _indexAccumulated = _accumulated - _actionData.accumulated;\n            return _actionData.limit > _indexAccumulated ? _actionData.limit - _indexAccumulated : 0;\n        }\n        return type(uint256).max;\n    }\n}\n"
    },
    "contracts/core/CoreStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../interface/IStrategy.sol\";\n\n/**\n * @title Aspida's CoreStrategy module\n * @dev This contract is an abstract contract that defines the core strategy functions and variables.\n * @author Aspida engineer\n */\nabstract contract CoreStrategy {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    uint256 internal constant MAX_RESERVE_RATIO = 1e18;\n\n    uint256 internal reserveRatio_;\n    uint256 internal strategyReserve_;\n    uint256 internal depositStrategy_;\n    uint256 internal receiveStrategy_;\n\n    /// @dev EnumerableSet of strategists\n    EnumerableSet.AddressSet internal strategists_;\n\n    /**\n     * @dev Emitted when \"reserveRatio_\" has changed.\n     */\n    event SetReserveRatio(uint256 reserveRatio);\n\n    /**\n     * @dev Emitted when \"strategyReserve_\" has been updated.\n     */\n    event UpdateStrategyReserve(uint256 strategyReserve);\n\n    /**\n     * @dev Emitted when 'strategy' is added to 'strategists_'.\n     */\n    event StrategyAdded(address strategy);\n\n    /**\n     * @dev Emitted when `strategy` is removed from `strategists_`.\n     */\n    event StrategyRemoved(address strategy);\n\n    /**\n     * @dev Emitted when a deposit is made to a `strategy`.\n     */\n    event DepositToStrategy(address strategy, uint256 amount);\n\n    /**\n     * @dev Emitted when an amount is received from a `strategy`.\n     */\n    event ReceiveFromStrategy(address strategy, uint256 amount);\n\n    /**\n     * @dev Throws an exception if strategic addresses are not enabled.\n     */\n    modifier isStrategy(address _strategy) {\n        require(strategists_.contains(_strategy), \"isStrategy: invalid strategy address\");\n        _;\n    }\n\n    /**\n     * @notice Set the reserve ratio internally.\n     * @dev This function sets the reserve ratio to the specified value.\n     * @param _reserveRatio The new reserve ratio to be set.\n     */\n    function _setReserveRatioInternal(uint256 _reserveRatio) internal {\n        require(_reserveRatio <= MAX_RESERVE_RATIO, \"_setReserveRatioInternal: ReserveRatio too large\");\n        require(_reserveRatio != reserveRatio_, \"_setReserveRatioInternal: Cannot set the same value\");\n        reserveRatio_ = _reserveRatio;\n        emit SetReserveRatio(_reserveRatio);\n    }\n\n    /**\n     * @notice Add `strategy` into strategists_.\n     * If `strategy` have not been a strategy, emits a `StrategyAdded` event.\n     *\n     * @param _strategy The strategy to add\n     */\n    function _addStrategyInternal(address _strategy) internal virtual {\n        require(\n            _strategy != address(0) && IStrategy(_strategy).core() == address(this),\n            \"_addStrategyInternal: invalid strategy address\"\n        );\n        require(strategists_.add(_strategy), \"_addStrategyInternal: Strategy has been added\");\n        emit StrategyAdded(_strategy);\n    }\n\n    /**\n     * @notice Remove `strategy` from strategists_.\n     * If `strategy` is a strategy, emits a `StrategyRemoved` event.\n     *\n     * @param _strategy The strategy to remove\n     */\n    function _removeStrategyInternal(address _strategy) internal virtual {\n        require(strategists_.remove(_strategy), \"_removeStrategyInternal: Strategy has been removed\");\n        emit StrategyRemoved(_strategy);\n    }\n\n    /**\n     * @notice Update the strategy reserve with the specified value.\n     * @dev This function updates the strategy reserve to the given value.\n     * @param _strategyReserve The new value for the strategy reserve.\n     */\n    function _updateStrategyReserve(uint256 _strategyReserve) internal {\n        strategyReserve_ = _strategyReserve;\n        emit UpdateStrategyReserve(_strategyReserve);\n    }\n\n    /**\n     * @notice Increase the strategy reserve by the specified amount.\n     * @dev This function increases the strategy reserve by the given amount.\n     * @param _increaseReserve The amount to increase the strategy reserve by.\n     */\n    function _increaseStrategyReserve(uint256 _increaseReserve) internal {\n        _updateStrategyReserve(strategyReserve_ + _increaseReserve);\n    }\n\n    /**\n     * @notice Decrease the strategy reserve by the specified amount.\n     * @dev This function decreases the strategy reserve by the given amount.\n     * @param _decreaseReserve The amount to decrease the strategy reserve by.\n     */\n    function _decreaseStrategyReserve(uint256 _decreaseReserve) internal {\n        _updateStrategyReserve(strategyReserve_ - _decreaseReserve);\n    }\n\n    /**\n     * @notice Increase the reserves by a ratio of the specified amount.\n     * @dev This function increases the reserves by a ratio of the given amount.\n     * @param _amount The amount to increase the reserves by.\n     */\n    function _increaseReservesByRatio(uint256 _amount) internal {\n        _increaseStrategyReserve((_amount * reserveRatio_) / MAX_RESERVE_RATIO);\n    }\n\n    /**\n     * @notice Deposit ETH into the specified strategy.\n     * @dev This function deposits the specified amount of ETH into the strategy.\n     * @param _strategy The address of the strategy to deposit into.\n     * @param _ethAmount The amount of ETH to deposit.\n     */\n    function _depositIntoStrategyInternal(\n        address _strategy,\n        uint256 _ethAmount\n    ) internal virtual isStrategy(_strategy) {\n        _decreaseStrategyReserve(_ethAmount);\n        depositStrategy_ += _ethAmount;\n        IStrategy(_strategy).strategyReceive{ value: _ethAmount }();\n        emit DepositToStrategy(_strategy, _ethAmount);\n    }\n\n    /**\n     * @notice Receive strategy earnings from the specified strategy.\n     * @dev This function receives the earnings from the specified strategy.\n     * @param _strategy The address of the strategy to receive earnings from.\n     */\n    function _receiveStrategyEarning(address _strategy) internal virtual isStrategy(_strategy) {\n        uint256 _ethValue = msg.value;\n        _increaseStrategyReserve(_ethValue);\n        receiveStrategy_ += _ethValue;\n        emit ReceiveFromStrategy(_strategy, _ethValue);\n    }\n\n    /**\n     * @notice Get the reserve ratio.\n     * @return The reserve ratio.\n     */\n    function reserveRatio() external view returns (uint256) {\n        return reserveRatio_;\n    }\n\n    /**\n     * @notice Get the strategy reserve.\n     * @return The strategy reserve.\n     */\n    function strategyReserve() external view returns (uint256) {\n        return strategyReserve_;\n    }\n\n    /**\n     * @notice Get the deposit strategy.\n     * @return The deposit strategy.\n     */\n    function depositStrategy() external view returns (uint256) {\n        return depositStrategy_;\n    }\n\n    /**\n     * @notice Get the receive strategy.\n     * @return The receive strategy.\n     */\n    function receiveStrategy() external view returns (uint256) {\n        return receiveStrategy_;\n    }\n\n    /**\n     * @notice Get all strategists.\n     * @return _strategists The list of strategy addresses.\n     */\n    function strategists() external view returns (address[] memory _strategists) {\n        _strategists = strategists_.values();\n    }\n}\n"
    },
    "contracts/core/CoreTreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Aspida's CoreTreasury module\n * @dev This contract is an abstract contract that defines the core treasury functionality of Aspida.\n * @dev It contains internal functions to set the treasury and treasury ratio, and a function to calculate the treasury amount.\n * @dev It also contains external functions to get the treasury address and treasury ratio.\n * @dev The maximum treasury ratio is set to 1e18.\n * @author Aspida engineer\n */\nabstract contract CoreTreasury {\n    uint256 internal constant MAX_TREASURY_RATIO = 1e18;\n\n    // The address of the treasury\n    address internal treasury_;\n\n    // The treasury ratio\n    uint256 internal treasuryRatio_;\n\n    /**\n     * @dev Emitted when the treasury address is set\n     */\n    event SetTreasury(address treasury);\n\n    /**\n     * @dev Emitted when the treasury ratio is set\n     */\n    event SetTreasuryRatio(uint256 treasuryRatio);\n\n    /**\n     * @dev Sets the treasury address.\n     * @param _treasury The address of the treasury.\n     */\n    function _setTreasuryInternal(address _treasury) internal {\n        require(_treasury != address(0) && _treasury != treasury_, \"_setTreasuryInternal: Invalid treasury\");\n        treasury_ = _treasury;\n        emit SetTreasury(_treasury);\n    }\n\n    /**\n     * @dev Sets the treasury ratio.\n     * @param _treasuryRatio The treasury ratio.\n     */\n    function _setTreasuryRatioInternal(uint256 _treasuryRatio) internal {\n        require(_treasuryRatio <= MAX_TREASURY_RATIO, \"_setTreasuryRatioInternal: TreasuryRatio too large\");\n        require(_treasuryRatio != treasuryRatio_, \"_setTreasuryRatioInternal: Cannot set the same value\");\n        treasuryRatio_ = _treasuryRatio;\n        emit SetTreasuryRatio(_treasuryRatio);\n    }\n\n    /**\n     * @dev Calculates the treasury amount.\n     * @param _amount The amount to calculate the treasury amount for.\n     * @return The treasury amount.\n     */\n    function _getTreasuryAmount(uint256 _amount) internal view returns (uint256) {\n        return (_amount * treasuryRatio_) / MAX_TREASURY_RATIO;\n    }\n\n    /**\n     * @dev Gets the treasury address.\n     * @return The address of the treasury.\n     */\n    function treasury() external view returns (address) {\n        return treasury_;\n    }\n\n    /**\n     * @dev Gets the treasury ratio.\n     * @return The treasury ratio.\n     */\n    function treasuryRatio() external view returns (uint256) {\n        return treasuryRatio_;\n    }\n}\n"
    },
    "contracts/core/StakingModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interface/IDepositContract.sol\";\n\n/**\n * @title Aspida's StakingModel\n * @dev This contract manages the deposit of validators to the Ethereum 2.0 deposit contract.\n * @author Aspida engineer\n */\nabstract contract StakingModel {\n    uint256 internal constant DEPOSIT_SIZE = 32 ether;\n    uint256 internal constant SIGNATURE_INDEX = 64;\n    uint64 internal constant DEPOSIT_SIZE_IN_GWEI_LE64 = 0x0040597307000000;\n\n    IDepositContract internal immutable DEPOSIT_CONTRACT; // Deposit contract is immutable\n\n    bytes internal withdrawalCredentials_; // Withdrawal credentials are stored as bytes\n\n    mapping(bytes => bool) internal pubKeyExpired_; // Mapping to check if a public key has expired\n\n    /**\n     * @dev Emitted when the withdrawal credentials are set.\n     */\n    event SetWithdrawalCredentials(bytes withdrawalCredential);\n\n    /**\n     * @dev Emitted when a validator is deposited.\n     */\n    event ValidatorDeposited(\n        address operator,\n        bytes pubKey,\n        bytes signature,\n        bytes withdrawalCredential,\n        bytes32 depositDataRoot\n    );\n\n    /**\n     * @dev Event emitted when a deposit is made.\n     */\n    event Deposit(uint256 depositValue, uint256 validatorCount);\n\n    constructor(IDepositContract _depositContract) {\n        DEPOSIT_CONTRACT = _depositContract;\n    }\n\n    /**\n     * @dev Sets the withdrawal credentials.\n     * @param _withdrawalCredentials The withdrawal credentials.\n     */\n    function _setWithdrawalCredentialsInternal(bytes memory _withdrawalCredentials) internal {\n        require(\n            _withdrawalCredentials.length == 32,\n            \"_setWithdrawalCredentialsInternal: Invalid withdrawalCredentials length\"\n        );\n\n        withdrawalCredentials_ = _withdrawalCredentials;\n        emit SetWithdrawalCredentials(_withdrawalCredentials);\n    }\n\n    struct Validator {\n        address operator;\n        bytes pubKey;\n        bytes signature;\n    }\n\n    /**\n     * @dev Deposits validators.\n     * @param _validators The validators to deposit.\n     */\n    function _deposit(Validator[] calldata _validators) internal {\n        require(_validators.length > 0, \"_deposit: Deposit 0 is invalid\");\n        bytes memory _withdrawalCredentials = withdrawalCredentials_;\n        for (uint256 i = 0; i < _validators.length; i++) {\n            require(!pubKeyExpired_[_validators[i].pubKey], \"_deposit: Invalid validator public key\");\n\n            bytes32 _depositDataRoot = _calculateDepositDataRoot(\n                _validators[i].pubKey,\n                _validators[i].signature,\n                _withdrawalCredentials\n            );\n            DEPOSIT_CONTRACT.deposit{ value: DEPOSIT_SIZE }(\n                _validators[i].pubKey,\n                _withdrawalCredentials,\n                _validators[i].signature,\n                _depositDataRoot\n            );\n\n            pubKeyExpired_[_validators[i].pubKey] = true;\n            emit ValidatorDeposited(\n                _validators[i].operator,\n                _validators[i].pubKey,\n                _validators[i].signature,\n                _withdrawalCredentials,\n                _depositDataRoot\n            );\n        }\n        emit Deposit(_validators.length * DEPOSIT_SIZE, _validators.length);\n    }\n\n    /**\n     * @dev Checks the deposit root and deposits validators.\n     * @param _validators The validators to deposit.\n     * @param _depositRoot The expected deposit root.\n     */\n    function _depositCheck(Validator[] calldata _validators, bytes32 _depositRoot) internal {\n        // Require that the deposit root has not changed\n        require(\n            _depositRoot == IDepositContract(DEPOSIT_CONTRACT).get_deposit_root(),\n            \"_depositCheck: Deposit root has changed\"\n        );\n        _deposit(_validators);\n    }\n\n    /**\n     * @dev Slices a portion of a bytes array.\n     * @param _src The source bytes array.\n     * @param _srcStart The starting index of the slice.\n     * @param _length The length of the slice.\n     * @return _dst The sliced bytes array.\n     */\n    function _bytesSlice(\n        bytes memory _src,\n        uint256 _srcStart,\n        uint256 _length\n    ) internal pure returns (bytes memory _dst) {\n        require(_srcStart + _length <= _src.length, \"_bytesSlice: Slice param error\");\n        _dst = new bytes(_length);\n        for (uint256 i = 0; i < _length; i++) {\n            _dst[i] = _src[i + _srcStart];\n        }\n    }\n\n    /**\n     * @dev Calculates the deposit data root.\n     * @param _pubKey The public key.\n     * @param _signature The signature.\n     * @param _withdrawalCredentials The withdrawal credentials.\n     * @return _depositDataRoot The deposit data root.\n     */\n    function _calculateDepositDataRoot(\n        bytes memory _pubKey,\n        bytes memory _signature,\n        bytes memory _withdrawalCredentials\n    ) internal pure returns (bytes32 _depositDataRoot) {\n        bytes32 _pubkeyRoot = sha256(abi.encodePacked(_pubKey, bytes16(0)));\n        bytes32 _signatureRoot = sha256(\n            abi.encodePacked(\n                sha256(abi.encodePacked(_bytesSlice(_signature, 0, SIGNATURE_INDEX))),\n                sha256(abi.encodePacked(_bytesSlice(_signature, SIGNATURE_INDEX, 32), bytes32(0)))\n            )\n        );\n\n        _depositDataRoot = sha256(\n            abi.encodePacked(\n                sha256(abi.encodePacked(_pubkeyRoot, _withdrawalCredentials)),\n                sha256(abi.encodePacked(DEPOSIT_SIZE_IN_GWEI_LE64, bytes24(0), _signatureRoot))\n            )\n        );\n    }\n\n    /**\n     * @dev Converts an address to withdrawal credentials.\n     * @param _withdrawalAddress The withdrawal address.\n     * @return The withdrawal credentials.\n     */\n    function _addressToWithdrawalCredentials(address _withdrawalAddress) internal pure returns (bytes memory) {\n        return abi.encodePacked(uint256(uint160(_withdrawalAddress)) | (1 << 248));\n    }\n\n    /**\n     * @dev Returns the deposit contract.\n     * @return The deposit contract.\n     */\n    function depositContract() external view returns (IDepositContract) {\n        return DEPOSIT_CONTRACT;\n    }\n\n    /**\n     * @dev Returns the withdrawal credentials.\n     * @return The withdrawal credentials.\n     */\n    function withdrawalCredentials() external view returns (bytes memory) {\n        return withdrawalCredentials_;\n    }\n\n    /**\n     * @dev Checks if a public key has expired.\n     * @param _pubKey The public key.\n     * @return True if the public key has expired, false otherwise.\n     */\n    function pubKeyExpired(bytes memory _pubKey) external view returns (bool) {\n        return pubKeyExpired_[_pubKey];\n    }\n}\n"
    },
    "contracts/core/Submit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interface/IaETH.sol\";\nimport \"../interface/IsaETH.sol\";\n\n/**\n * @title Aspida's Submit model\n * @dev This contract allows users to submit ETH and mint aETH tokens in return.\n * Users can also submit ETH and stake it to receive saETH tokens.\n * @author Aspida engineer\n */\nabstract contract Submit {\n    IaETH internal immutable AETH; // aETH token contract\n    IsaETH internal immutable SAETH; // saETH token contract\n\n    uint256 internal submitted_; // total amount of ETH submitted\n\n    /**\n     * @dev Emitted when the withdrawal credentials are set.\n     */\n    event Submitted(address sender, address recipient, uint256 ethValue);\n\n    constructor(IaETH _aETH, IsaETH _saETH) {\n        AETH = _aETH;\n        SAETH = _saETH;\n    }\n\n    /**\n     * @dev Internal function to submit ETH and mint aETH tokens\n     * @param _receiver The address of the receiver of the aETH tokens\n     */\n    function _submit(address _receiver) internal virtual {\n        uint256 _ethValue = msg.value;\n        require(_ethValue != 0, \"_submit: ETH cannot be 0\");\n\n        submitted_ += _ethValue;\n\n        AETH.mint(_receiver, _ethValue);\n        emit Submitted(msg.sender, _receiver, _ethValue);\n    }\n\n    /**\n     * @dev External function to submit ETH and mint aETH tokens\n     */\n    function submit() external payable {\n        _submit(msg.sender);\n    }\n\n    /**\n     * @dev External function to submit ETH and mint aETH tokens for a specific receiver\n     * @param _receiver The address of the receiver of the aETH tokens\n     */\n    function submit(address _receiver) external payable {\n        _submit(_receiver);\n    }\n\n    /**\n     * @dev External function to submit ETH, mint aETH tokens and stake them to receive saETH tokens\n     * @param _receiver The address of the receiver of the saETH tokens\n     */\n    function submitAndStake(address _receiver) external payable {\n        _submit(address(this));\n\n        AETH.approve(address(SAETH), msg.value);\n        require(SAETH.deposit(msg.value, _receiver) > 0, \"No saETH was returned\");\n    }\n\n    /**\n     * @dev External function to return the aETH token contract\n     * @return The aETH token contract\n     */\n    function aETH() external view returns (IaETH) {\n        return AETH;\n    }\n\n    /**\n     * @dev External function to return the saETH token contract\n     * @return The saETH token contract\n     */\n    function saETH() external view returns (IsaETH) {\n        return SAETH;\n    }\n\n    /**\n     * @dev External function to return the total amount of ETH submitted\n     * @return The total amount of ETH submitted\n     */\n    function submitted() external view returns (uint256) {\n        return submitted_;\n    }\n}\n"
    },
    "contracts/core/WithdrawalQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport \"../library/TransferHelper.sol\";\n\n/**\n * @title Aspida's WithdrawalQueue model\n * @dev This contract implements a withdrawal queue for users to withdraw their funds in a fair manner.\n * Users can withdraw their funds immediately if there are enough funds available, otherwise they will be added to the queue.\n * The queue is processed in a first-in-first-out (FIFO) manner.\n * Users can claim their funds from the queue at any time.\n * @author Aspida engineer\n */\nabstract contract WithdrawalQueue {\n    using EnumerableSet for EnumerableSet.UintSet;\n    using TransferHelper for address;\n\n    uint256 internal totalWithdrawn_; // Total amount of funds withdrawn\n    uint256 internal totalClaimed_; // Total amount of funds claimed\n    uint256 internal pendingClaimAmount_; // Total amount of funds in the queue\n\n    uint256 internal lastQueueId_; // The last queue ID\n    mapping(address => EnumerableSet.UintSet) internal userQueueIds_; // Mapping of user addresses to their queue IDs\n\n    mapping(uint256 => uint256) internal claimAccumulated_; // Mapping of queue IDs to their accumulated claim amounts\n\n    /**\n     * @dev Emitted when the total amount of funds in the queue is updated.\n     */\n    event UpdatePendingClaim(uint256 pendingClaimAmount);\n\n    /**\n     * @dev Emitted when the total amount of funds claimed is updated.\n     */\n    event UpdateTotalClaimed(uint256 totalClaimed);\n\n    /**\n     * @dev Emitted when a user is added to the withdrawal queue.\n     */\n    event EnterWithdrawalQueue(\n        address sender,\n        address recipient,\n        uint256 queueId,\n        uint256 claimAmount,\n        uint256 accumulated\n    );\n\n    /**\n     * @dev Emitted when a user is removed from the withdrawal queue.\n     */\n    event ExitWithdrawalQueue(address sender, address recipient, uint256 queueId, uint256 claimAmount);\n\n    /**\n     * @dev Emitted when funds are withdrawn from the contract.\n     */\n    event Withdrawn(address sender, address recipient, uint256 amount);\n\n    /**\n     * @dev Emitted when funds are claimed from the queue.\n     */\n    event Claimed(address sender, address recipient, uint256 amount);\n\n    /**\n     * @dev Updates the total amount of funds in the queue.\n     * @param _pendingClaimAmount The new total amount of funds in the queue.\n     */\n    function _updatePendingClaim(uint256 _pendingClaimAmount) internal {\n        pendingClaimAmount_ = _pendingClaimAmount;\n        emit UpdatePendingClaim(_pendingClaimAmount);\n    }\n\n    /**\n     * @dev Updates the total amount of funds claimed.\n     * @param _totalClaimed The new total amount of funds claimed.\n     */\n    function _updateTotalClaimed(uint256 _totalClaimed) internal {\n        totalClaimed_ = _totalClaimed;\n        emit UpdateTotalClaimed(_totalClaimed);\n    }\n\n    /**\n     * @dev Adds the user to the withdrawal queue.\n     * @param _receiver The address of the user to add to the queue.\n     * @param _amount The amount of funds to add to the queue.\n     */\n    function _withdrawalQueue(address _receiver, uint256 _amount) internal {\n        uint256 _queueId = lastQueueId_;\n        uint256 _accumulated = claimAccumulated_[_queueId];\n\n        _queueId += 1;\n        userQueueIds_[_receiver].add(_queueId);\n\n        uint256 _claimAccumulated = _accumulated + _amount;\n        claimAccumulated_[_queueId] = _claimAccumulated;\n\n        lastQueueId_ = _queueId;\n        _updatePendingClaim(pendingClaimAmount_ + _amount);\n        emit EnterWithdrawalQueue(msg.sender, _receiver, _queueId, _amount, _claimAccumulated);\n    }\n\n    /**\n     * @dev Withdraws funds from the contract.\n     * @param _sender The address of the user withdrawing the funds.\n     * @param _receiver The address of the user receiving the funds.\n     * @param _amount The amount of funds to withdraw.\n     */\n    function _withdraw(address _sender, address _receiver, uint256 _amount) internal virtual {\n        require(_amount > 0, \"_withdraw: withdraw amount cannot be 0\");\n        if (_withdrawableAmount() < _amount) {\n            _withdrawalQueue(_receiver, _amount);\n            return;\n        }\n\n        totalWithdrawn_ += _amount;\n        _receiver.safeTransferETH(_amount);\n        emit Withdrawn(_sender, _receiver, _amount);\n    }\n\n    /**\n     * @dev Claims funds from the queue for a specific user.\n     * @param _sender The address of the user claiming the funds.\n     * @param _receiver The address of the user receiving the funds.\n     */\n    function _claimByAddress(address _sender, address _receiver) internal virtual {\n        EnumerableSet.UintSet storage _userQueueIds = userQueueIds_[_sender];\n        _claimByQueueId(_sender, _receiver, _userQueueIds.values(), _userQueueIds);\n    }\n\n    /**\n     * @dev Claims funds from the queue for a specific user and queue IDs.\n     * @param _sender The address of the user claiming the funds.\n     * @param _receiver The address of the user receiving the funds.\n     * @param _queueIds The list of queue IDs to claim from.\n     * @param _userQueueIds The user's queue IDs.\n     */\n    function _claimByQueueId(\n        address _sender,\n        address _receiver,\n        uint256[] memory _queueIds,\n        EnumerableSet.UintSet storage _userQueueIds\n    ) internal virtual {\n        require(_queueIds.length > 0, \"_claimByQueueId: Queue list cannot be empty\");\n\n        uint256 _availableBalance = _claimableAmount();\n        uint256 _claimAmount;\n        for (uint256 i = 0; i < _queueIds.length; i++) {\n            uint256 _amount = _getClaimAmount(_queueIds[i], _availableBalance);\n            if (_amount == 0) continue;\n\n            require(_userQueueIds.remove(_queueIds[i]), \"_claimByQueueId: Queue id does not exist\");\n            emit ExitWithdrawalQueue(_sender, _receiver, _queueIds[i], _amount);\n\n            _claimAmount += _amount;\n        }\n\n        require(_claimAmount > 0, \"_claimByQueueId: No claim amount\");\n\n        _updatePendingClaim(pendingClaimAmount_ - _claimAmount);\n        _updateTotalClaimed(totalClaimed_ + _claimAmount);\n\n        _receiver.safeTransferETH(_claimAmount);\n        emit Claimed(_sender, _receiver, _claimAmount);\n    }\n\n    /**\n     * @dev Returns the amount of funds that can be withdrawn.\n     * @return _availableAmount The available amount of funds that can be withdrawn.\n     */\n    function _withdrawableAmount() internal view virtual returns (uint256 _availableAmount) {\n        uint256 _balance = address(this).balance;\n        uint256 _locked = pendingClaimAmount_;\n        if (_balance > _locked) _availableAmount = _balance - _locked;\n    }\n\n    /**\n     * @dev Returns the amount of funds that can be claimed.\n     * @return _claimableAmount The claimable amount of funds.\n     */\n    function _claimableAmount() internal view virtual returns (uint256) {\n        return address(this).balance + totalClaimed_;\n    }\n\n    /**\n     * @dev Returns the claim amount and accumulated claim amount for a specific queue ID.\n     * @param _queueId The queue ID.\n     * @return _claimAmount The claim amount for the queue ID.\n     * @return _claimAccumulated The accumulated claim amount for the queue ID.\n     */\n    function _claimDataByQueueId(\n        uint256 _queueId\n    ) internal view returns (uint256 _claimAmount, uint256 _claimAccumulated) {\n        _claimAccumulated = claimAccumulated_[_queueId];\n        if (_claimAccumulated > 0) _claimAmount = _claimAccumulated - claimAccumulated_[_queueId - 1];\n    }\n\n    /**\n     * @dev Returns the claim amount for a specific queue ID.\n     * @param _queueId The queue ID.\n     * @param _claimable The claimable amount of funds.\n     * @return _claimAmount The claim amount for the queue ID.\n     */\n    function _getClaimAmount(uint256 _queueId, uint256 _claimable) internal view returns (uint256 _claimAmount) {\n        uint256 _accumulated;\n        (_claimAmount, _accumulated) = _claimDataByQueueId(_queueId);\n        if (_claimable < _accumulated) _claimAmount = 0;\n    }\n\n    /**\n     * @dev Allows a user to withdraw funds.\n     * @param _amount The amount of funds to withdraw.\n     */\n    function withdraw(uint256 _amount) external {\n        _withdraw(msg.sender, msg.sender, _amount);\n    }\n\n    /**\n     * @dev Allows a user to withdraw funds and specify a receiver address.\n     * @param _amount The amount of funds to withdraw.\n     * @param _receiver The address of the receiver.\n     */\n    function withdraw(uint256 _amount, address _receiver) external {\n        _withdraw(msg.sender, _receiver, _amount);\n    }\n\n    /**\n     * @dev Allows a user to claim their funds from the queue.\n     */\n    function claim() external {\n        _claimByAddress(msg.sender, msg.sender);\n    }\n\n    /**\n     * @dev Allows a user to claim their funds from the queue and specify a receiver address.\n     * @param _receiver The address of the receiver.\n     */\n    function claim(address _receiver) external {\n        _claimByAddress(msg.sender, _receiver);\n    }\n\n    /**\n     * @dev Allows a user to claim their funds from the queue using specific queue IDs.\n     * @param _queueIds The list of queue IDs to claim from.\n     */\n    function claim(uint256[] memory _queueIds) external {\n        _claimByQueueId(msg.sender, msg.sender, _queueIds, userQueueIds_[msg.sender]);\n    }\n\n    /**\n     * @dev Allows a user to claim their funds from the queue using specific queue IDs and specify a receiver address.\n     * @param _receiver The address of the receiver.\n     * @param _queueIds The list of queue IDs to claim from.\n     */\n    function claim(address _receiver, uint256[] memory _queueIds) external {\n        _claimByQueueId(msg.sender, _receiver, _queueIds, userQueueIds_[msg.sender]);\n    }\n\n    /**\n     * @dev Returns the total amount of funds withdrawn.\n     * @return The total amount of funds withdrawn.\n     */\n    function totalWithdrawn() external view returns (uint256) {\n        return totalWithdrawn_;\n    }\n\n    /**\n     * @dev Returns the total amount of funds claimed.\n     * @return The total amount of funds claimed.\n     */\n    function totalClaimed() external view returns (uint256) {\n        return totalClaimed_;\n    }\n\n    /**\n     * @dev Returns the total amount of funds in the queue.\n     * @return The total amount of funds in the queue.\n     */\n    function pendingClaimAmount() external view returns (uint256) {\n        return pendingClaimAmount_;\n    }\n\n    /**\n     * @dev Returns the last queue ID.\n     * @return The last queue ID.\n     */\n    function lastQueueId() external view returns (uint256) {\n        return lastQueueId_;\n    }\n\n    /**\n     * @dev Returns the accumulated amount of funds in the queue.\n     * @return The accumulated amount of funds in the queue.\n     */\n    function accumulated() external view returns (uint256) {\n        return claimAccumulated_[lastQueueId_];\n    }\n\n    /**\n     * @dev Returns the amount of funds that can be withdrawn.\n     * @return The amount of funds that can be withdrawn.\n     */\n    function withdrawableAmount() external view returns (uint256) {\n        return _withdrawableAmount();\n    }\n\n    /**\n     * @dev Returns the amount of funds that can be claimed.\n     * @return The amount of funds that can be claimed.\n     */\n    function claimableAmount() external view returns (uint256) {\n        return _claimableAmount();\n    }\n\n    /**\n     * @dev Returns the claim amount and accumulated claim amount for a specific queue ID.\n     * @param _queueId The queue ID to get claim data for.\n     * @return _claimAmount The claim amount for the queue ID.\n     * @return _claimAccumulated The accumulated claim amount for the queue ID.\n     */\n    function claimDataByQueueId(\n        uint256 _queueId\n    ) external view returns (uint256 _claimAmount, uint256 _claimAccumulated) {\n        (_claimAmount, _claimAccumulated) = _claimDataByQueueId(_queueId);\n    }\n\n    /**\n     * @dev Returns the claim data for a specific address.\n     * @param _account The address to get claim data for.\n     * @return _ids The IDs of the claims.\n     * @return _claimAmounts The amounts of the claims.\n     * @return _claimStatuses The statuses of the claims.\n     */\n    function claimDataByAddress(\n        address _account\n    ) external view returns (uint256[] memory _ids, uint256[] memory _claimAmounts, bool[] memory _claimStatuses) {\n        _ids = userQueueIds_[_account].values();\n        _claimAmounts = new uint256[](_ids.length);\n        _claimStatuses = new bool[](_ids.length);\n\n        uint256 _claimable = _claimableAmount();\n        uint256 _accumulated;\n        for (uint256 i = 0; i < _ids.length; i++) {\n            (_claimAmounts[i], _accumulated) = _claimDataByQueueId(_ids[i]);\n            _claimStatuses[i] = _claimable >= _accumulated;\n        }\n    }\n\n    /**\n     * @dev Returns the user's queue IDs, claim amounts, and accumulated claim amounts.\n     * @param _account The address of the user.\n     * @return _ids The IDs of the user's claims.\n     * @return _claimAmounts The amounts of the user's claims.\n     * @return _accumulations The accumulated amounts of the user's claims.\n     */\n    function userQueueIds(\n        address _account\n    ) external view returns (uint256[] memory _ids, uint256[] memory _claimAmounts, uint256[] memory _accumulations) {\n        _ids = userQueueIds_[_account].values();\n        _claimAmounts = new uint256[](_ids.length);\n        _accumulations = new uint256[](_ids.length);\n\n        for (uint256 i = 0; i < _accumulations.length; i++) {\n            (_claimAmounts[i], _accumulations[i]) = _claimDataByQueueId(_ids[i]);\n        }\n    }\n}\n"
    },
    "contracts/CorePrimary.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"./library/PauseGuardian.sol\";\nimport \"./library/Manable.sol\";\nimport \"./core/CoreTreasury.sol\";\nimport \"./core/CoreStrategy.sol\";\nimport \"./core/StakingModel.sol\";\nimport \"./core/Submit.sol\";\nimport \"./core/WithdrawalQueue.sol\";\n\nimport \"./interface/IRewardOracle.sol\";\n\n/**\n * @title Aspida's ETH 2.0 staking Core(primary)\n * @author Aspida engineer\n * @notice This contract is the primary contract for Aspida's ETH 2.0 staking Core.\n *         It inherits from several other contracts and contains various functions for managing the Core.\n * @dev This contract is implemented using the OpenZeppelin library.\n *      It is used for staking ETH 2.0 and managing the Core's treasury, strategies, and actions.\n *      It also contains functions for submitting and withdrawing ETH, as well as managing the withdrawal queue.\n */\ncontract CorePrimary is\n    Ownable2StepUpgradeable,\n    PauseGuardian,\n    ReentrancyGuardUpgradeable,\n    Manable,\n    CoreTreasury,\n    CoreStrategy,\n    Submit,\n    StakingModel,\n    WithdrawalQueue\n{\n    address internal rewardOracle_;\n\n    uint256 internal received_;\n\n    event SetRewardOracle(address rewardOracle);\n    event Received(uint256 _ethValue);\n\n    /**\n     * @dev Throws if called by any account other than the rewardOracle.\n     */\n    modifier onlyRewardOracle() {\n        require(rewardOracle_ == msg.sender, \"onlyRewardOracle: caller is not the rewardOracle\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to check if the contract has enough balance to deposit for the given validators.\n     *      It throws if the contract's balance minus the strategy reserve and pending claim amount divided by the deposit size is less than the number of validators.\n     * @param _validators The array of validators to check for.\n     */\n    modifier depositBalanceCheck(Validator[] calldata _validators) {\n        require(\n            (address(this).balance - strategyReserve_ - pendingClaimAmount_) / DEPOSIT_SIZE >= _validators.length,\n            \"depositBalanceCheck: Not enough ETH\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     */\n    constructor(\n        IDepositContract _depositContract,\n        IaETH _aETH,\n        IsaETH _saETH\n    ) StakingModel(_depositContract) Submit(_aETH, _saETH) {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Expects to call only once to initialize CorePrimary.\n     */\n    function initialize() public initializer {\n        __Ownable2Step_init();\n        _setTreasuryInternal(owner());\n        _setWithdrawalCredentialsInternal(_addressToWithdrawalCredentials(address(this)));\n    }\n\n    /**\n     * @notice Receives ETH sent to the contract.\n     */\n    receive() external payable {\n        received_ += msg.value;\n        emit Received(msg.value);\n    }\n\n    /**\n     * @dev Unpause when Core is paused.\n     */\n    function _open() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Pause Core.\n     */\n    function _close() external onlyPauseGuardian {\n        _pause();\n    }\n\n    /**\n     * @notice Adds a new pause guardian to the Core.\n     * @param _pauseGuardian The address of the new pause guardian.\n     */\n    function _addPauseGuardian(address _pauseGuardian) external onlyOwner {\n        _addPauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Removes a pause guardian from the Core.\n     * @param _pauseGuardian The address of the pause guardian to remove.\n     */\n    function _removePauseGuardian(address _pauseGuardian) external onlyOwner {\n        _removePauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Adds a new manager to the Core.\n     * @param _manager The address of the new manager.\n     */\n    function _addManager(address _manager) external onlyOwner {\n        _addManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Removes a manager from the Core.\n     * @param _manager The address of the manager to remove.\n     */\n    function _removeManager(address _manager) external onlyOwner {\n        _removeManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Sets the treasury address.\n     * @param _treasury The address of the new treasury.\n     */\n    function _setTreasury(address _treasury) external onlyOwner {\n        _setTreasuryInternal(_treasury);\n    }\n\n    /**\n     * @notice Sets the treasury ratio.\n     * @param _treasuryRatio The new treasury ratio.\n     */\n    function _setTreasuryRatio(uint256 _treasuryRatio) external onlyOwner {\n        _setTreasuryRatioInternal(_treasuryRatio);\n    }\n\n    /**\n     * @notice Sets the reserve ratio.\n     * @param _reserveRatio The new reserve ratio.\n     */\n    function _setReserveRatio(uint256 _reserveRatio) external onlyOwner {\n        _setReserveRatioInternal(_reserveRatio);\n    }\n\n    /**\n     * @notice Adds a new strategy.\n     * @param _strategy The address of the new strategy.\n     */\n    function _addStrategy(address _strategy) external onlyOwner {\n        _addStrategyInternal(_strategy);\n    }\n\n    /**\n     * @notice Removes a strategy.\n     * @param _strategy The address of the strategy to remove.\n     */\n    function _removeStrategy(address _strategy) external onlyOwner {\n        _removeStrategyInternal(_strategy);\n    }\n\n    /**\n     * @notice Releases the strategy reserve.\n     * @param _releaseAmount The amount to release.\n     */\n    function _releaseStrategyReserve(uint256 _releaseAmount) external onlyOwner {\n        _decreaseStrategyReserve(_releaseAmount);\n    }\n\n    /**\n     * @notice Sets the reward oracle address.\n     * @param _rewardOracle The address of the new reward oracle.\n     */\n    function _setRewardOracle(address _rewardOracle) external onlyOwner {\n        require(\n            _rewardOracle != rewardOracle_ && IRewardOracle(_rewardOracle).core() == address(this),\n            \"_setRewardOracle: Invalid reward oracle address\"\n        );\n        rewardOracle_ = _rewardOracle;\n        emit SetRewardOracle(_rewardOracle);\n    }\n\n    /**\n     * @notice Disables the reward oracle.\n     */\n    function _disableRewardOracle() external onlyOwner {\n        rewardOracle_ = address(0);\n        emit SetRewardOracle(address(0));\n    }\n\n    /**\n     * @notice Deposits ETH into a strategy.\n     * @param _strategy The address of the strategy.\n     * @param _ethAmount The amount of ETH to deposit.\n     */\n    function _depositIntoStrategy(address _strategy, uint256 _ethAmount) external onlyOwner {\n        _depositIntoStrategyInternal(_strategy, _ethAmount);\n    }\n\n    /**\n     * @notice Recap the loss(Slashing and strategy losses).\n     * @param _loss The amount of loss\n     *\n     * Requirements:\n     * - the caller must be `owner`.\n     */\n    function _recapLoss(uint256 _loss) external onlyOwner {\n        // Burn the loss from the treasury\n        AETH.burnFrom(treasury_, _loss);\n    }\n\n    /**\n     * @notice Deposits ETH into the contract for staking.\n     * @param _validators The array of validators to deposit.\n     */\n    function deposit(\n        Validator[] calldata _validators\n    ) external whenNotPaused nonReentrant onlyManager depositBalanceCheck(_validators) {\n        _deposit(_validators);\n    }\n\n    /**\n     * @notice The whitelist operator deposits ETH into the contract for staking.\n     * @param _validators The array of validators to deposit.\n     * @param _depositRoot The expected deposit root.\n     */\n    function depositCheck(\n        Validator[] calldata _validators,\n        bytes32 _depositRoot\n    ) external whenNotPaused nonReentrant onlyManager depositBalanceCheck(_validators) {\n        _depositCheck(_validators, _depositRoot);\n    }\n\n    /**\n     * @notice Supplies reward.\n     * @param _amount The amount to supply.\n     */\n    function supplyReward(uint256 _amount) external whenNotPaused onlyRewardOracle {\n        require(_amount != 0, \"supplyReward: Amount cannot be 0\");\n\n        uint256 _treasuryAmount = _getTreasuryAmount(_amount);\n        if (_treasuryAmount > 0) AETH.mint(treasury_, _treasuryAmount);\n\n        uint256 _reward = _amount - _treasuryAmount;\n        if (_reward > 0) AETH.mint(address(SAETH), _reward);\n    }\n\n    /**\n     * @notice Receives earnings from a strategy.\n     */\n    function receiveStrategyEarning() external payable {\n        _receiveStrategyEarning(msg.sender);\n    }\n\n    /**\n     * @notice Submits a transaction to the CorePrimary contract.\n     * @dev This function is called internally when a user submits a transaction.\n     * @param _receiver The address of the receiver of the transaction.\n     */\n    function _submit(address _receiver) internal override whenNotPaused nonReentrant {\n        _increaseReservesByRatio(msg.value);\n        Submit._submit(_receiver);\n    }\n\n    /**\n     * @dev Internal function to withdraw funds from the contract.\n     * @param _sender The address of the sender.\n     * @param _receiver The address of the receiver.\n     * @param _amount The amount to withdraw.\n     */\n    function _withdraw(\n        address _sender,\n        address _receiver,\n        uint256 _amount\n    ) internal override whenNotPaused nonReentrant {\n        AETH.burnFrom(_sender, _amount);\n        WithdrawalQueue._withdraw(_sender, _receiver, _amount);\n    }\n\n    /**\n     * @notice Claims the rewards by queue ID.\n     * @param _sender The address of the sender.\n     * @param _receiver The address of the receiver.\n     * @param _queueIds The array of queue IDs.\n     * @param _userQueueIds The set of user queue IDs.\n     */\n    function _claimByQueueId(\n        address _sender,\n        address _receiver,\n        uint256[] memory _queueIds,\n        EnumerableSet.UintSet storage _userQueueIds\n    ) internal override whenNotPaused nonReentrant {\n        WithdrawalQueue._claimByQueueId(_sender, _receiver, _queueIds, _userQueueIds);\n    }\n\n    /**\n     * @dev Returns the amount of ETH that can be withdrawn from the contract.\n     * @return _availableAmount The available amount of ETH that can be withdrawn.\n     */\n    function _withdrawableAmount() internal view override returns (uint256 _availableAmount) {\n        uint256 _balance = address(this).balance;\n        uint256 _locked = pendingClaimAmount_ + strategyReserve_;\n        if (_balance > _locked) {\n            _availableAmount = _balance - _locked;\n        }\n    }\n\n    /**\n     * @dev Returns the amount of ETH that can be claimed from the contract.\n     * @return _claimableAmount The amount of ETH that can be claimed.\n     */\n    function _claimableAmount() internal view override returns (uint256) {\n        return address(this).balance - strategyReserve_ + totalClaimed_;\n    }\n\n    /**\n     * @notice Withdraws a specified amount of tokens with permit functionality.\n     * @param _amount The amount of tokens to withdraw.\n     * @param _receiver The address to receive the tokens.\n     * @param _deadline The deadline for the permit.\n     * @param _approveMax Boolean indicating whether to approve the maximum amount.\n     * @param _v The recovery id of the permit signature.\n     * @param _r The R value of the permit signature.\n     * @param _s The S value of the permit signature.\n     */\n    function withdrawWithPermit(\n        uint256 _amount,\n        address _receiver,\n        uint256 _deadline,\n        bool _approveMax,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        // Determine the value to be approved\n        uint256 _value = _approveMax ? type(uint256).max : _amount;\n\n        // Call the permit function of the token contract\n        AETH.permit(msg.sender, address(this), _value, _deadline, _v, _r, _s);\n\n        // Withdraw the specified amount of tokens\n        _withdraw(msg.sender, _receiver, _amount);\n    }\n\n    /**\n     * @notice Redeems a specified amount of saETH and withdraws the underlying ETH.\n     * @param _saETHAmount The amount of saETH to redeem.\n     */\n    function redeemAndWithdraw(uint256 _saETHAmount) external {\n        address _sender = msg.sender;\n        uint256 _amount = SAETH.redeem(_saETHAmount, address(this), _sender);\n        _withdraw(address(this), _sender, _amount);\n    }\n\n    /**\n     * @notice Withdraws a specified amount of underlying ETH and saETH.\n     * @param _amount The amount of underlying ETH to withdraw.\n     */\n    function redeemUnderlyingAndWithdraw(uint256 _amount) external {\n        address _sender = msg.sender;\n        SAETH.withdraw(_amount, address(this), _sender);\n        _withdraw(address(this), _sender, _amount);\n    }\n\n    /**\n     * @dev Returns the address of the reward oracle.\n     * @return The address of the reward oracle.\n     */\n    function rewardOracle() external view returns (address) {\n        return rewardOracle_;\n    }\n\n    /**\n     * @dev Returns the amount of ETH received by the contract.\n     * @return The amount of ETH received by the contract.\n     */\n    function received() external view returns (uint256) {\n        return received_;\n    }\n\n    /**\n     * @dev Returns whether the given address is a pause guardian.\n     * @param _pauseGuardian The address to check.\n     * @return Whether the given address is a pause guardian.\n     */\n    function isPauseGuardian(address _pauseGuardian) public view override returns (bool) {\n        return PauseGuardian.isPauseGuardian(_pauseGuardian) || _pauseGuardian == owner();\n    }\n\n    /**\n     * @dev Returns the staking reward.\n     * @param _deposited The amount deposited.\n     * @param _exited The amount exited.\n     * @return _stakingReward The staking reward.\n     */\n    function stakingReward(uint256 _deposited, uint256 _exited) external view returns (uint256 _stakingReward) {\n        uint256 _minuend = address(this).balance +\n            totalWithdrawn_ +\n            totalClaimed_ +\n            depositStrategy_ +\n            _deposited *\n            DEPOSIT_SIZE;\n        uint256 _subtrahend = submitted_ + received_ + receiveStrategy_ + _exited * DEPOSIT_SIZE;\n        if (_minuend > _subtrahend) _stakingReward = _minuend - _subtrahend;\n    }\n}\n"
    },
    "contracts/interface/IaETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\";\n\ninterface IaETH is IERC20Upgradeable, IERC20PermitUpgradeable {\n    function mint(address _receiver, uint256 _amount) external;\n\n    function burn(uint256 _amount) external;\n\n    function burnFrom(address _account, uint256 _amount) external;\n\n    function minterMint(address _receiver, uint256 _amount) external;\n\n    function minterBurn(uint256 _amount) external;\n\n    function mintCap(address _minter) external view returns (uint256);\n\n    function mintAmount(address _minter) external view returns (uint256);\n}\n"
    },
    "contracts/interface/ICore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface ICore {\n    function receiveStrategyEarning() external payable;\n\n    function supplyReward(uint256 _amount) external;\n\n    function aETH() external view returns (address);\n\n    function treasury() external view returns (address);\n}\n"
    },
    "contracts/interface/ICurve.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface ICurvePool {\n    function add_liquidity(uint256[] calldata _amounts, uint256 _minMintAmount) external returns (uint256);\n\n    function add_liquidity(\n        uint256[] calldata _amounts,\n        uint256 _minMintAmount,\n        address _receiver\n    ) external returns (uint256);\n\n    function remove_liquidity(\n        uint256 _burnAmount,\n        uint256[] calldata _minAmounts\n    ) external returns (uint256[] calldata);\n\n    function remove_liquidity(\n        uint256 _burnAmount,\n        uint256[] calldata _minAmounts,\n        address _receiver\n    ) external returns (uint256[] calldata);\n\n    function remove_liquidity_imbalance(uint256[] calldata _amounts, uint256 _maxBurnAmount) external returns (uint256);\n\n    function remove_liquidity_imbalance(\n        uint256[] calldata _amounts,\n        uint256 _maxBurnAmount,\n        address _receiver\n    ) external returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _burnAmount,\n        int128 _outputIndex,\n        uint256 _minReceived\n    ) external returns (uint256);\n\n    function remove_liquidity_one_coin(\n        uint256 _burnAmount,\n        int128 _outputIndex,\n        uint256 _minReceived,\n        address _receiver\n    ) external returns (uint256);\n\n    function exchange(\n        int128 _inputIndex,\n        int128 _outputIndex,\n        uint256 _inputAmount,\n        uint256 _minOutputAmount\n    ) external returns (uint256);\n\n    function exchange(\n        int128 _inputIndex,\n        int128 _outputIndex,\n        uint256 _inputAmount,\n        uint256 _minOutputAmount,\n        address _receiver\n    ) external returns (uint256);\n\n    function coins(uint256 _tokenIndex) external view returns (address);\n\n    function admin_balances(uint256 _tokenIndex) external view returns (uint256);\n\n    function fee() external view returns (uint256);\n\n    function initial_A() external view returns (uint256);\n\n    function future_A() external view returns (uint256);\n\n    function initial_A_time() external view returns (uint256);\n\n    function future_A_time() external view returns (uint256);\n\n    function admin_fee() external view returns (uint256);\n\n    function A() external view returns (uint256);\n\n    function A_precise() external view returns (uint256);\n\n    function get_virtual_price() external view returns (uint256);\n\n    function get_balances() external view returns (uint256[] calldata);\n\n    function balances(uint256 _tokenIndex) external view returns (uint256);\n\n    function calc_token_amount(uint256[] calldata _amounts, bool _isDeposit) external view returns (uint256);\n\n    function get_dy(int128 _i, int128 _j, uint256 _dx) external view returns (uint256);\n\n    function calc_withdraw_one_coin(uint256 _burnAmount, int128 _outputIndex) external view returns (uint256);\n}\n"
    },
    "contracts/interface/IDepositContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IDepositContract {\n    function get_deposit_root() external view returns (bytes32 rootHash);\n\n    function deposit(\n        bytes calldata pubkey, // 48 bytes\n        bytes calldata withdrawal_credentials, // 32 bytes\n        bytes calldata signature, // 96 bytes\n        bytes32 deposit_data_root\n    ) external payable;\n}\n"
    },
    "contracts/interface/ILido.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\";\n\ninterface IStETH is IERC20Upgradeable, IERC20PermitUpgradeable {\n    function getLidoLocator() external view returns (ILidoLocator);\n\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\n\n    function submit(address _referral) external payable returns (uint256);\n}\n\ninterface ILidoLocator {\n    function accountingOracle() external view returns (address);\n\n    function depositSecurityModule() external view returns (address);\n\n    function elRewardsVault() external view returns (address);\n\n    function legacyOracle() external view returns (address);\n\n    function lido() external view returns (address);\n\n    function oracleReportSanityChecker() external view returns (address);\n\n    function burner() external view returns (address);\n\n    function stakingRouter() external view returns (address);\n\n    function treasury() external view returns (address);\n\n    function validatorsExitBusOracle() external view returns (address);\n\n    function withdrawalQueue() external view returns (address);\n\n    function withdrawalVault() external view returns (address);\n\n    function postTokenRebaseReceiver() external view returns (address);\n\n    function oracleDaemonConfig() external view returns (address);\n\n    function coreComponents()\n        external\n        view\n        returns (\n            address elRewardsVault,\n            address oracleReportSanityChecker,\n            address stakingRouter,\n            address treasury,\n            address withdrawalQueue,\n            address withdrawalVault\n        );\n\n    function oracleReportComponentsForLido()\n        external\n        view\n        returns (\n            address accountingOracle,\n            address elRewardsVault,\n            address oracleReportSanityChecker,\n            address burner,\n            address withdrawalQueue,\n            address withdrawalVault,\n            address postTokenRebaseReceiver\n        );\n}\n\ninterface ILidoWithdrawalQueueERC721 {\n    struct WithdrawalRequestStatus {\n        /// @notice stETH token amount that was locked on withdrawal queue for this request\n        uint256 amountOfStETH;\n        /// @notice amount of stETH shares locked on withdrawal queue for this request\n        uint256 amountOfShares;\n        /// @notice address that can claim or transfer this request\n        address owner;\n        /// @notice timestamp of when the request was created, in seconds\n        uint256 timestamp;\n        /// @notice true, if request is finalized\n        bool isFinalized;\n        /// @notice true, if request is claimed. Request is claimable if (isFinalized && !isClaimed)\n        bool isClaimed;\n    }\n\n    function requestWithdrawals(\n        uint256[] calldata _amounts,\n        address _owner\n    ) external returns (uint256[] memory requestIds);\n\n    function claimWithdrawal(uint256 _requestId) external;\n\n    function claimWithdrawals(uint256[] calldata _requestIds, uint256[] calldata _hints) external;\n\n    function claimWithdrawalsTo(uint256[] calldata _requestIds, uint256[] calldata _hints, address _recipient) external;\n\n    function getWithdrawalRequests(address _owner) external view returns (uint256[] memory requestsIds);\n\n    function getWithdrawalStatus(\n        uint256[] calldata _requestIds\n    ) external view returns (WithdrawalRequestStatus[] memory statuses);\n\n    function getLastCheckpointIndex() external view returns (uint256);\n\n    function findCheckpointHints(\n        uint256[] calldata _requestIds,\n        uint256 _firstIndex,\n        uint256 _lastIndex\n    ) external view returns (uint256[] memory hintIds);\n}\n"
    },
    "contracts/interface/IRewardOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IRewardOracle {\n    function core() external view returns (address);\n}\n"
    },
    "contracts/interface/IsaETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IsaETH {\n    function deposit(uint256 _assets, address _receiver) external returns (uint256 _shares);\n\n    function withdraw(uint256 _assets, address _receiver, address _owner) external returns (uint256 _shares);\n\n    function redeem(uint256 _shares, address _receiver, address _owner) external returns (uint256 _assets);\n}\n"
    },
    "contracts/interface/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\ninterface IStrategy {\n    function strategyReceive() external payable returns (uint256);\n\n    function aETH() external view returns (address);\n\n    function core() external view returns (address);\n}\n"
    },
    "contracts/library/Manable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/**\n * @title Aspida's manager module\n * @author Aspida engineer\n */\nabstract contract Manable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev EnumerableSet of managers\n    EnumerableSet.AddressSet internal managers_;\n\n    /**\n     * @dev Emitted when `manager` is added as `managers`.\n     */\n    event ManagerAdded(address manager);\n\n    /**\n     * @dev Emitted when `manager` is removed from `managers`.\n     */\n    event ManagerRemoved(address manager);\n\n    /**\n     * @dev Throws if called by any account other than the managers.\n     */\n    modifier onlyManager() {\n        require(managers_.contains(msg.sender), \"onlyManager: caller is not manager\");\n        _;\n    }\n\n    /**\n     * @notice Add `manager` into managers.\n     * If `manager` have not been a manager, emits a `ManagerAdded` event.\n     *\n     * @param _manager The manager to add\n     */\n    function _addManagerInternal(address _manager) internal virtual {\n        require(_manager != address(0), \"_addManagerInternal: _manager the zero address\");\n        require(managers_.add(_manager), \"_addManagerInternal: _manager has been added\");\n        emit ManagerAdded(_manager);\n    }\n\n    /**\n     * @notice Remove `manager` from managers.\n     * If `manager` is a manager, emits a `ManagerRemoved` event.\n     *\n     * @param _manager The manager to remove\n     */\n    function _removeManagerInternal(address _manager) internal virtual {\n        require(managers_.remove(_manager), \"_removeManagerInternal: _manager has been removed\");\n        emit ManagerRemoved(_manager);\n    }\n\n    /**\n     * @notice Return all managers\n     * @return _managers The list of manager addresses\n     */\n    function managers() public view returns (address[] memory _managers) {\n        _managers = managers_.values();\n    }\n\n    /**\n     * @dev Check if address is manager\n     * @param _manager The address to check\n     * @return Is manager boolean, true: is the manager; false: not the manager\n     */\n    function isManager(address _manager) public view returns (bool) {\n        return managers_.contains(_manager);\n    }\n}\n"
    },
    "contracts/library/Minter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Aspida's minter module\n * @author Aspida engineer\n */\nabstract contract Minter {\n    /**\n     * @notice Mapping of token minters to corresponding token mintage cap\n     * @dev  The mint cap of the token minter, will be checked in minting\n     *  -1 means there is no limit on the cap\n     *  0 means the token token can not be mint any more\n     */\n    mapping(address => uint256) internal mintCaps_;\n\n    /**\n     * @notice Mapping of token miners and corresponding token minting volume\n     */\n    mapping(address => uint256) internal mintAmounts_;\n\n    /// @dev Emitted when `mintCap` changes.\n    event SetMinterCap(address minter, uint256 mintCap);\n\n    /// @dev Emitted when `mintAmount` increase.\n    event IncreaseMintAmount(address minter, uint256 increaseAmount, uint256 mintAmount);\n\n    /// @dev Emitted when `mintAmount` decrease.\n    event DecreaseMintAmount(address minter, uint256 decreaseAmount, uint256 mintAmount);\n\n    /**\n     * @dev Throws an exception if the mint cap is exceeded.\n     */\n    modifier checkMintCap(uint256 _increaseAmount) {\n        _checkMintCap(msg.sender, _increaseAmount);\n        _;\n    }\n\n    /**\n     * @dev Set `mintCap`.\n     * @param _minter Minter address\n     * @param _mintCap The mint caps to set for minter\n     */\n    function _setMinterCapInternal(address _minter, uint256 _mintCap) internal virtual {\n        require(_minter != address(0), \"_setMinterCapInternal: Minter the zero address\");\n        require(_mintCap != mintCaps_[_minter], \"_setMinterCapInternal: Cannot set the same value\");\n        mintCaps_[_minter] = _mintCap;\n        emit SetMinterCap(_minter, _mintCap);\n    }\n\n    /**\n     * @dev Increase minter `mintAmount`.\n     * @param _minter Minter address\n     * @param _amount Increase Amount\n     */\n    function _increaseMintAmount(address _minter, uint256 _amount) internal virtual {\n        mintAmounts_[_minter] += _amount;\n        emit IncreaseMintAmount(_minter, _amount, mintAmounts_[_minter]);\n    }\n\n    /**\n     * @dev Decrease minter `mintAmount`.\n     * @param _minter Minter address\n     * @param _amount Decrease Amount\n     */\n    function _decreaseMintAmount(address _minter, uint256 _amount) internal virtual {\n        mintAmounts_[_minter] -= _amount;\n        emit DecreaseMintAmount(_minter, _amount, mintAmounts_[_minter]);\n    }\n\n    /**\n     * @dev Checks if the mint cap is reached for a minter.\n     * @param _minter The address of the minter.\n     * @param _amount The amount to be minted.\n     * Throws an exception if the mint cap is reached.\n     */\n    function _checkMintCap(address _minter, uint256 _amount) internal virtual {\n        require(mintAmounts_[_minter] + _amount <= mintCaps_[_minter], \"_checkMintCap: Minter mint capacity reached\");\n    }\n\n    /**\n     * @dev Mint cap of the minter\n     * @return _minter Minter address\n     */\n    function mintCap(address _minter) external view returns (uint256) {\n        return mintCaps_[_minter];\n    }\n\n    /**\n     * @dev Mint amount of the minter\n     * @return _minter Minter address\n     */\n    function mintAmount(address _minter) external view returns (uint256) {\n        return mintAmounts_[_minter];\n    }\n}\n"
    },
    "contracts/library/PauseGuardian.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n/**\n * @title Aspida's PauseGuardian module\n * @author Aspida engineer\n */\nabstract contract PauseGuardian is PausableUpgradeable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @dev EnumerableSet of pauseGuardians\n    EnumerableSet.AddressSet internal pauseGuardians_;\n\n    /**\n     * @dev Emitted when `pauseGuardian` is added as `pauseGuardian`.\n     */\n    event PauseGuardianAdded(address pauseGuardian);\n\n    /**\n     * @dev Emitted when `pauseGuardian` is removed from `pauseGuardians`.\n     */\n    event PauseGuardianRemoved(address pauseGuardian);\n\n    /**\n     * @dev Throws if called by any account other than pauseGuardian.\n     */\n    modifier onlyPauseGuardian() {\n        require(isPauseGuardian(msg.sender), \"onlyPauseGuardian: caller is not pauseGuardian\");\n        _;\n    }\n\n    /**\n     * @notice Add `pauseGuardian` into pauseGuardians.\n     * If `pauseGuardian` have not been a pauseGuardian, emits a `PauseGuardianAdded` event.\n     *\n     * @param _pauseGuardian The pauseGuardian to add\n     */\n    function _addPauseGuardianInternal(address _pauseGuardian) internal virtual {\n        require(_pauseGuardian != address(0), \"_addPauseGuardianInternal: _pauseGuardian the zero address\");\n        require(pauseGuardians_.add(_pauseGuardian), \"_addPauseGuardianInternal: _pauseGuardian has been added\");\n        emit PauseGuardianAdded(_pauseGuardian);\n    }\n\n    /**\n     * @notice Remove `pauseGuardian` from pauseGuardians.\n     * If `pauseGuardian` is a pauseGuardian, emits a `PauseGuardianRemoved` event.\n     *\n     * @param _pauseGuardian The pauseGuardian to remove\n     */\n    function _removePauseGuardianInternal(address _pauseGuardian) internal virtual {\n        require(\n            pauseGuardians_.remove(_pauseGuardian),\n            \"_removePauseGuardianInternal: _pauseGuardian has been removed\"\n        );\n        emit PauseGuardianRemoved(_pauseGuardian);\n    }\n\n    /**\n     * @notice Return all pauseGuardians\n     * @return _pauseGuardians The list of pauseGuardian addresses\n     */\n    function pauseGuardians() public view returns (address[] memory _pauseGuardians) {\n        _pauseGuardians = pauseGuardians_.values();\n    }\n\n    /**\n     * @dev Check if address is pauseGuardian\n     * @param _pauseGuardian The address to check\n     * @return Is pauseGuardian boolean, true: is the pauseGuardian; false: not the pauseGuardian\n     */\n    function isPauseGuardian(address _pauseGuardian) public view virtual returns (bool) {\n        return pauseGuardians_.contains(_pauseGuardian);\n    }\n}\n"
    },
    "contracts/library/ProxyAdminPro.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\n\ncontract ProxyAdminPro is ProxyAdmin, Ownable2Step {\n    function _transferOwnership(address newOwner) internal override(Ownable, Ownable2Step) {\n        Ownable2Step._transferOwnership(newOwner);\n    }\n\n    function transferOwnership(address newOwner) public override(Ownable, Ownable2Step) onlyOwner {\n        Ownable2Step.transferOwnership(newOwner);\n    }\n}\n"
    },
    "contracts/library/TransferHelper.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for safely executing transfers and approvals of ERC20 tokens and ETH.\n */\nlibrary TransferHelper {\n    /**\n     * @dev Safely approves `value` tokens for `to` by calling the `approve` function on `token`.\n     * @param token The address of the ERC20 token.\n     * @param to The address to approve tokens for.\n     * @param value The number of tokens to approve.\n     */\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: APPROVE_FAILED\");\n    }\n\n    /**\n     * @dev Safely transfers `value` tokens to `to` by calling the `transfer` function on `token`.\n     * @param token The address of the ERC20 token.\n     * @param to The address to transfer tokens to.\n     * @param value The number of tokens to transfer.\n     */\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FAILED\");\n    }\n\n    /**\n     * @dev Safely transfers `value` tokens from `from` to `to` by calling the `transferFrom` function on `token`.\n     * @param token The address of the ERC20 token.\n     * @param from The address to transfer tokens from.\n     * @param to The address to transfer tokens to.\n     * @param value The number of tokens to transfer.\n     */\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n    }\n\n    /**\n     * @dev Safely transfers `value` ETH to `to`.\n     * @param to The address to transfer ETH to.\n     * @param value The amount of ETH to transfer.\n     */\n    function safeTransferETH(address to, uint value) internal {\n        (bool success, ) = to.call{ value: value }(new bytes(0));\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/mock/DepositContract.sol": {
      "content": "// ┏━━━┓━┏┓━┏┓━━┏━━━┓━━┏━━━┓━━━━┏━━━┓━━━━━━━━━━━━━━━━━━━┏┓━━━━━┏━━━┓━━━━━━━━━┏┓━━━━━━━━━━━━━━┏┓━\n// ┃┏━━┛┏┛┗┓┃┃━━┃┏━┓┃━━┃┏━┓┃━━━━┗┓┏┓┃━━━━━━━━━━━━━━━━━━┏┛┗┓━━━━┃┏━┓┃━━━━━━━━┏┛┗┓━━━━━━━━━━━━┏┛┗┓\n// ┃┗━━┓┗┓┏┛┃┗━┓┗┛┏┛┃━━┃┃━┃┃━━━━━┃┃┃┃┏━━┓┏━━┓┏━━┓┏━━┓┏┓┗┓┏┛━━━━┃┃━┗┛┏━━┓┏━┓━┗┓┏┛┏━┓┏━━┓━┏━━┓┗┓┏┛\n// ┃┏━━┛━┃┃━┃┏┓┃┏━┛┏┛━━┃┃━┃┃━━━━━┃┃┃┃┃┏┓┃┃┏┓┃┃┏┓┃┃━━┫┣┫━┃┃━━━━━┃┃━┏┓┃┏┓┃┃┏┓┓━┃┃━┃┏┛┗━┓┃━┃┏━┛━┃┃━\n// ┃┗━━┓━┃┗┓┃┃┃┃┃┃┗━┓┏┓┃┗━┛┃━━━━┏┛┗┛┃┃┃━┫┃┗┛┃┃┗┛┃┣━━┃┃┃━┃┗┓━━━━┃┗━┛┃┃┗┛┃┃┃┃┃━┃┗┓┃┃━┃┗┛┗┓┃┗━┓━┃┗┓\n// ┗━━━┛━┗━┛┗┛┗┛┗━━━┛┗┛┗━━━┛━━━━┗━━━┛┗━━┛┃┏━┛┗━━┛┗━━┛┗┛━┗━┛━━━━┗━━━┛┗━━┛┗┛┗┛━┗━┛┗┛━┗━━━┛┗━━┛━┗━┛\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┃┃━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┗┛━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n// SPDX-License-Identifier: CC0-1.0\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\nimport \"../library/Manable.sol\";\nimport \"../library/TransferHelper.sol\";\n\n// This interface is designed to be compatible with the Vyper version.\n/// @notice This is the Ethereum 2.0 deposit contract interface.\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\ninterface IDepositContract {\n    /// @notice A processed deposit event.\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\n\n    /// @notice Submit a Phase 0 DepositData object.\n    /// @param pubkey A BLS12-381 public key.\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\n    /// @param signature A BLS12-381 signature.\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\n    /// Used as a protection against malformed input.\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable;\n\n    /// @notice Query the current deposit root hash.\n    /// @return The deposit root hash.\n    function get_deposit_root() external view returns (bytes32);\n\n    /// @notice Query the current deposit count.\n    /// @return The deposit count encoded as a little endian 64-bit number.\n    function get_deposit_count() external view returns (bytes memory);\n}\n\n// Based on official specification in https://eips.ethereum.org/EIPS/eip-165\ninterface ERC165 {\n    /// @notice Query if a contract implements an interface\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @dev Interface identification is specified in ERC-165. This function\n    ///  uses less than 30,000 gas.\n    /// @return `true` if the contract implements `interfaceId` and\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool);\n}\n\n// This is a rewrite of the Vyper Eth2.0 deposit contract in Solidity.\n// It tries to stay as close as possible to the original source code.\n/// @notice This is the Ethereum 2.0 deposit contract interface.\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\ncontract DepositContract is IDepositContract, ERC165, Ownable2StepUpgradeable, Manable {\n    using TransferHelper for address;\n    uint constant DEPOSIT_CONTRACT_TREE_DEPTH = 32;\n    // NOTE: this also ensures `deposit_count` will fit into 64-bits\n    uint constant MAX_DEPOSIT_COUNT = 2 ** DEPOSIT_CONTRACT_TREE_DEPTH - 1;\n\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] branch;\n    uint256 deposit_count;\n\n    bytes32[DEPOSIT_CONTRACT_TREE_DEPTH] zero_hashes;\n\n    constructor() {\n        // Compute hashes in empty sparse Merkle tree\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH - 1; height++)\n            zero_hashes[height + 1] = sha256(abi.encodePacked(zero_hashes[height], zero_hashes[height]));\n        initialize();\n    }\n\n    function initialize() public initializer {\n        __Ownable2Step_init();\n    }\n\n    function get_deposit_root() external view override returns (bytes32) {\n        bytes32 node;\n        uint size = deposit_count;\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH; height++) {\n            if ((size & 1) == 1) node = sha256(abi.encodePacked(branch[height], node));\n            else node = sha256(abi.encodePacked(node, zero_hashes[height]));\n            size /= 2;\n        }\n        return sha256(abi.encodePacked(node, to_little_endian_64(uint64(deposit_count)), bytes24(0)));\n    }\n\n    function get_deposit_count() external view override returns (bytes memory) {\n        return to_little_endian_64(uint64(deposit_count));\n    }\n\n    function deposit(\n        bytes calldata pubkey,\n        bytes calldata withdrawal_credentials,\n        bytes calldata signature,\n        bytes32 deposit_data_root\n    ) external payable override {\n        // Extended ABI length checks since dynamic types are used.\n        require(pubkey.length == 48, \"DepositContract: invalid pubkey length\");\n        require(withdrawal_credentials.length == 32, \"DepositContract: invalid withdrawal_credentials length\");\n        require(signature.length == 96, \"DepositContract: invalid signature length\");\n\n        // Check deposit amount\n        require(msg.value >= 1 ether, \"DepositContract: deposit value too low\");\n        require(msg.value % 1 gwei == 0, \"DepositContract: deposit value not multiple of gwei\");\n        uint deposit_amount = msg.value / 1 gwei;\n        require(deposit_amount <= type(uint64).max, \"DepositContract: deposit value too high\");\n\n        // Emit `DepositEvent` log\n        bytes memory amount = to_little_endian_64(uint64(deposit_amount));\n        emit DepositEvent(\n            pubkey,\n            withdrawal_credentials,\n            amount,\n            signature,\n            to_little_endian_64(uint64(deposit_count))\n        );\n\n        // Compute deposit data root (`DepositData` hash tree root)\n        bytes32 pubkey_root = sha256(abi.encodePacked(pubkey, bytes16(0)));\n        bytes32 signature_root = sha256(\n            abi.encodePacked(\n                sha256(abi.encodePacked(signature[:64])),\n                sha256(abi.encodePacked(signature[64:], bytes32(0)))\n            )\n        );\n        bytes32 node = sha256(\n            abi.encodePacked(\n                sha256(abi.encodePacked(pubkey_root, withdrawal_credentials)),\n                sha256(abi.encodePacked(amount, bytes24(0), signature_root))\n            )\n        );\n\n        // Verify computed and expected deposit data roots match\n        require(\n            node == deposit_data_root,\n            \"DepositContract: reconstructed DepositData does not match supplied deposit_data_root\"\n        );\n\n        // Avoid overflowing the Merkle tree (and prevent edge case in computing `branch`)\n        require(deposit_count < MAX_DEPOSIT_COUNT, \"DepositContract: merkle tree full\");\n\n        // Add deposit data root to Merkle tree (update a single `branch` node)\n        deposit_count += 1;\n        uint size = deposit_count;\n        for (uint height = 0; height < DEPOSIT_CONTRACT_TREE_DEPTH; height++) {\n            if ((size & 1) == 1) {\n                branch[height] = node;\n                return;\n            }\n            node = sha256(abi.encodePacked(branch[height], node));\n            size /= 2;\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    function supportsInterface(bytes4 interfaceId) external pure override returns (bool) {\n        return interfaceId == type(ERC165).interfaceId || interfaceId == type(IDepositContract).interfaceId;\n    }\n\n    function to_little_endian_64(uint64 value) internal pure returns (bytes memory ret) {\n        ret = new bytes(8);\n        bytes8 bytesValue = bytes8(value);\n        // Byteswapping during copying to bytes.\n        ret[0] = bytesValue[7];\n        ret[1] = bytesValue[6];\n        ret[2] = bytesValue[5];\n        ret[3] = bytesValue[4];\n        ret[4] = bytesValue[3];\n        ret[5] = bytesValue[2];\n        ret[6] = bytesValue[1];\n        ret[7] = bytesValue[0];\n    }\n\n    /**\n     * @notice Adds a new manager.\n     * @param _manager The address of the manager to be added.\n     * @dev If the manager has not been added before, emits a `ManagerAdded` event.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _addManager(address _manager) external onlyOwner {\n        _addManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Removes a manager.\n     * @param _manager The address of the manager to be removed.\n     * @dev If the manager is currently a manager, emits a `ManagerRemoved` event.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _removeManager(address _manager) external onlyOwner {\n        _removeManagerInternal(_manager);\n    }\n\n    function takeOut(address _receiver, uint256 _amount) external onlyManager {\n        _receiver.safeTransferETH(_amount);\n    }\n}\n"
    },
    "contracts/mock/Faucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\n/**\n * @title Aspida's ether Faucet\n * @author Aspida engineer\n */\nabstract contract Faucet {\n    uint256 public allocateAmount;\n\n    mapping(address => uint256) public userAllocates;\n\n    function _setAllocateAmountInternal(uint256 _allocateAmount) internal virtual {\n        require(_allocateAmount != allocateAmount, \"_setAllocateAmountInternal: Cannot set the same value\");\n        allocateAmount = _allocateAmount;\n    }\n\n    function allocateTo() public virtual returns (uint256) {\n        uint256 _allocateAmount;\n        if (allocateAmount > userAllocates[msg.sender]) {\n            _allocateAmount = allocateAmount - userAllocates[msg.sender];\n            userAllocates[msg.sender] += _allocateAmount;\n        }\n        return _allocateAmount;\n    }\n}\n"
    },
    "contracts/mock/MockCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"../interface/ICore.sol\";\n\n/**\n * @title Aspida's ether MockCore\n * @author Aspida engineer\n */\ncontract MockCore is ICore {\n    function receiveStrategyEarning() external payable override {}\n\n    function supplyReward(uint256 _amount) external pure override {\n        _amount;\n    }\n\n    function aETH() external pure override returns (address) {\n        return address(0);\n    }\n\n    function treasury() external pure override returns (address) {\n        return address(0);\n    }\n}\n"
    },
    "contracts/mock/MockstETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\n\nimport \"../library/PauseGuardian.sol\";\nimport \"../library/Manable.sol\";\nimport \"./Faucet.sol\";\n\nimport \"../library/TransferHelper.sol\";\n\n/**\n * @title Aspida's ether MockstETH\n * @author Aspida engineer\n */\ncontract MockstETH is\n    Ownable2StepUpgradeable,\n    PauseGuardian,\n    ERC20BurnableUpgradeable,\n    ERC20PermitUpgradeable,\n    Manable,\n    Faucet\n{\n    using TransferHelper for address;\n\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     */\n    constructor() {\n        initialize();\n    }\n\n    receive() external payable {\n        _submit(address(0));\n    }\n\n    /**\n     * @notice Initializes the MockstETH contract.\n     * @dev This function should be called only once to initialize MockstETH.\n     */\n    function initialize() public initializer {\n        string memory _tokenName = \"Aspida MockstETH\";\n        string memory _tokenSymbol = \"MockstETH\";\n        __Ownable2Step_init();\n        __ERC20_init(_tokenName, _tokenSymbol);\n        __ERC20Permit_init(_tokenName);\n    }\n\n    /**\n     * @dev Unpauses the MockstETH contract.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _open() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Pauses the MockstETH contract.\n     * @notice This function can only be called by the pause guardian.\n     */\n    function _close() external onlyPauseGuardian {\n        _pause();\n    }\n\n    /**\n     * @dev Adds a new pause guardian.\n     * @param _pauseGuardian The address of the pause guardian to be added.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _addPauseGuardian(address _pauseGuardian) external onlyOwner {\n        _addPauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @dev Removes a pause guardian.\n     * @param _pauseGuardian The address of the pause guardian to be removed.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _removePauseGuardian(address _pauseGuardian) external onlyOwner {\n        _removePauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Adds a new manager.\n     * @param _manager The address of the manager to be added.\n     * @dev If the manager has not been added before, emits a `ManagerAdded` event.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _addManager(address _manager) external onlyOwner {\n        _addManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Removes a manager.\n     * @param _manager The address of the manager to be removed.\n     * @dev If the manager is currently a manager, emits a `ManagerRemoved` event.\n     * @notice This function can only be called by the contract owner.\n     */\n    function _removeManager(address _manager) external onlyOwner {\n        _removeManagerInternal(_manager);\n    }\n\n    function _setAllocateAmount(uint256 _allocateAmount) external onlyOwner {\n        _setAllocateAmountInternal(_allocateAmount);\n    }\n\n    /**\n     * @dev Hook function called before any token transfer.\n     * @param from The address transferring the tokens.\n     * @param to The address receiving the tokens.\n     * @param amount The amount of tokens being transferred.\n     * @notice This function checks if the token is paused before allowing the transfer.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\n        require(!paused(), \"_beforeTokenTransfer: token transfer while paused\");\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    /**\n     * @notice Mints new tokens and assigns them to the specified receiver.\n     * @param _receiver The address to receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @notice This function can only be called by a manager.\n     */\n    function mint(address _receiver, uint256 _amount) external onlyManager {\n        _mint(_receiver, _amount);\n    }\n\n    /**\n     * @dev Process user deposit, mints liquid tokens and increase the pool buffer\n     * @param _referral address of referral.\n     * @return amount of StETH shares generated\n     */\n    function _submit(address _referral) internal returns (uint256) {\n        _referral;\n        require(msg.value != 0, \"ZERO_DEPOSIT\");\n        _mint(msg.sender, msg.value);\n        return msg.value;\n    }\n\n    /**\n     * @notice Send funds to the pool with optional _referral parameter\n     * @dev This function is alternative way to submit funds. Supports optional referral address.\n     * @return Amount of StETH shares generated\n     */\n    function submit(address _referral) external payable returns (uint256) {\n        return _submit(_referral);\n    }\n\n    /**\n     * @notice Burns tokens from a specified account.\n     * @param _account The account to burn tokens from.\n     * @param _amount The amount of tokens to burn.\n     * @dev This function allows burning tokens from another account if the sender has the necessary allowance.\n     */\n    function burnFrom(address _account, uint256 _amount) public override {\n        address _sender = msg.sender;\n        if (_sender != _account) _spendAllowance(_account, _sender, _amount);\n        _burn(_account, _amount);\n    }\n\n    /**\n     * @notice Checks if an address is a pause guardian.\n     * @param _pauseGuardian The address to check.\n     * @return A boolean indicating whether the address is a pause guardian.\n     */\n    function isPauseGuardian(address _pauseGuardian) public view override returns (bool) {\n        return PauseGuardian.isPauseGuardian(_pauseGuardian) || _pauseGuardian == owner();\n    }\n\n    function takeOut(address _receiver, uint256 _amount) external onlyManager {\n        _receiver.safeTransferETH(_amount);\n    }\n\n    function allocateTo() public override returns (uint256) {\n        uint256 _allocateAmount = super.allocateTo();\n        if (_allocateAmount > 0) _mint(msg.sender, _allocateAmount);\n        return _allocateAmount;\n    }\n}\n"
    },
    "contracts/mock/MockStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"../strategy/model/StrategyBase.sol\";\n\n/**\n * @title Aspida's ether MockStrategy\n * @author Aspida engineer\n */\ncontract MockStrategy is StrategyBase {\n    constructor(ICore _core) StrategyBase(_core) {}\n\n    function strategyReceive() external payable override onlyCore returns (uint256) {}\n\n    function repayCore() external {\n        CORE.receiveStrategyEarning{ value: address(this).balance }();\n    }\n}\n"
    },
    "contracts/OFT/Capped.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Capped {\n    uint256 internal cap_;\n\n    event SetCap(uint256 cap);\n\n    function _setCapInternal(uint256 _cap) internal {\n        require(_cap != cap_, \"_setCapInternal: Cannot set the same cap\");\n        cap_ = _cap;\n        emit SetCap(_cap);\n    }\n\n    function cap() external view returns (uint256) {\n        return cap_;\n    }\n}\n"
    },
    "contracts/OFT/OFTV2Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable2Step.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/BaseOFTV2.sol\";\n\nabstract contract OFTV2Upgradeable is Ownable2Step, ERC20Upgradeable, BaseOFTV2 {\n    uint internal immutable ld2sdRate;\n\n    constructor(uint8 _sharedDecimals, address _lzEndpoint) BaseOFTV2(_sharedDecimals, _lzEndpoint) {\n        uint8 _decimals = decimals();\n        require(_sharedDecimals <= _decimals, \"OFT: sharedDecimals must be <= decimals\");\n        ld2sdRate = 10 ** (_decimals - _sharedDecimals);\n    }\n\n    function __OFTV2Upgradeable_init(string memory _name, string memory _symbol) internal onlyInitializing {\n        _transferOwnership(_msgSender());\n        __ERC20_init(_name, _symbol);\n        __OFTV2Upgradeable_init_unchained();\n    }\n\n    function __OFTV2Upgradeable_init_unchained() internal onlyInitializing {}\n\n    /************************************************************************\n     * public functions\n     ************************************************************************/\n    function circulatingSupply() public view virtual override returns (uint) {\n        return totalSupply();\n    }\n\n    function token() public view virtual override returns (address) {\n        return address(this);\n    }\n\n    /************************************************************************\n     * internal functions\n     ************************************************************************/\n    function _debitFrom(address _from, uint16, bytes32, uint _amount) internal virtual override returns (uint) {\n        address spender = _msgSender();\n        if (_from != spender) _spendAllowance(_from, spender, _amount);\n        _burn(_from, _amount);\n        return _amount;\n    }\n\n    function _creditTo(uint16, address _toAddress, uint _amount) internal virtual override returns (uint) {\n        _mint(_toAddress, _amount);\n        return _amount;\n    }\n\n    function _transferFrom(address _from, address _to, uint _amount) internal virtual override returns (uint) {\n        address _spender = _msgSender();\n        // if transfer from this contract, no need to check allowance\n        if (_from != address(this) && _from != _spender) _spendAllowance(_from, _spender, _amount);\n        _transfer(_from, _to, _amount);\n        return _amount;\n    }\n\n    function _ld2sdRate() internal view virtual override returns (uint) {\n        return ld2sdRate;\n    }\n\n    function _transferOwnership(address _newOwner) internal virtual override(Ownable, Ownable2Step) {\n        Ownable2Step._transferOwnership(_newOwner);\n    }\n\n    function transferOwnership(address _newOwner) public virtual override(Ownable, Ownable2Step) {\n        Ownable2Step.transferOwnership(_newOwner);\n    }\n\n    function _msgSender() internal view virtual override(Context, ContextUpgradeable) returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual override(Context, ContextUpgradeable) returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/RewardOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\nimport \"./library/PauseGuardian.sol\";\nimport \"./library/Manable.sol\";\n\nimport \"./interface/ICore.sol\";\nimport \"./interface/IaETH.sol\";\n\n/**\n * @title Aspida's ETH 2.0 staking reward oracle\n * @dev This contract serves as a reward oracle for ETH 2.0 staking. It calculates and updates the epoch reward based on various parameters.\n * @author Aspida engineer\n */\ncontract RewardOracle is Ownable2StepUpgradeable, PauseGuardian, Manable {\n    uint256 internal constant BASE = 1e18;\n    uint256 internal constant SECONDS_PER_SLOT = 12 seconds;\n    uint256 internal constant SLOT_PER_EPOCH = 32;\n    uint256 internal constant SECONDS_PER_EPOCH = SECONDS_PER_SLOT * SLOT_PER_EPOCH;\n    uint256 internal constant EPOCH_PER_YEAR = 365 days / SECONDS_PER_EPOCH;\n    uint256 internal constant EPOCH_INTEREST_RATE_MAX = BASE / EPOCH_PER_YEAR;\n\n    uint256 internal constant DEPOSIT_SIZE = 32 ether; // The deposit size for validators\n\n    ICore internal immutable CORE; // The interface for the core contract\n\n    uint256 internal immutable ZERO_EPOCH_TIMESTAMP; // The timestamp of the zero epoch\n\n    uint256 internal interestRateLimitPerEpoch_; // The interest rate limit per epoch\n    uint256 internal validatorLimitPerEpoch_; // The validator limit per epoch\n\n    uint256 internal lastEpochId_; // The last epoch ID\n    uint256 internal lastActivatedValidatorCount_; // The last activated validator count\n\n    /**\n     * @dev Emitted when the interest rate limit per epoch is set\n     */\n    event SetInterestRateLimitPerEpoch(uint256 interestRateLimitPerEpoch);\n\n    /**\n     * @dev Emitted when the validator limit per epoch is set\n     */\n    event SetValidatorLimitPerEpoch(uint256 validatorLimitPerEpoch);\n\n    /**\n     * @dev Emitted when the epoch reward is updated\n     */\n    event UpdateEpochReward(\n        uint256 lastEpochId,\n        uint256 submitEpochId,\n        uint256 lastActivatedValidatorCount,\n        uint256 activatedValidatorCount,\n        uint256 rewardIncrement\n    );\n\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     * @param _core The interface for the core contract\n     */\n    constructor(ICore _core, uint256 _zeroEpochTimestamp) {\n        CORE = _core;\n        ZERO_EPOCH_TIMESTAMP = _zeroEpochTimestamp;\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Expects to call only once to initialize RewardOracle.\n     */\n    function initialize() public initializer {\n        __Ownable2Step_init();\n        _setInterestRateLimitPerEpoch(BASE);\n        lastEpochId_ = _currentEpochId();\n    }\n\n    /**\n     * @dev Unpause when RewardOracle is paused.\n     */\n    function _open() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Pause RewardOracle.\n     */\n    function _close() external onlyPauseGuardian {\n        _pause();\n    }\n\n    /**\n     * @notice Add `_pauseGuardian` into pause guardians.\n     * @param _pauseGuardian The address of the pause guardian to add\n     */\n    function _addPauseGuardian(address _pauseGuardian) external onlyOwner {\n        _addPauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Remove `_pauseGuardian` from pause guardians.\n     * @param _pauseGuardian The address of the pause guardian to remove\n     */\n    function _removePauseGuardian(address _pauseGuardian) external onlyOwner {\n        _removePauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Add `_manager` into managers.\n     * If `_manager` have not been a manager, emits a `ManagerAdded` event.\n     *\n     * @param _manager The manager to add\n     *\n     * Requirements:\n     * - the caller must be `owner`.\n     */\n    function _addManager(address _manager) external onlyOwner {\n        _addManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Remove `_manager` from managers.\n     * If `_manager` is a manager, emits a `ManagerRemoved` event.\n     *\n     * @param _manager The manager to remove\n     *\n     * Requirements:\n     * - the caller must be `owner`.\n     */\n    function _removeManager(address _manager) external onlyOwner {\n        _removeManagerInternal(_manager);\n    }\n\n    /**\n     * @notice Set the interest rate limit per epoch.\n     * @param _annualInterestRate The annual interest rate\n     *\n     * Requirements:\n     * - the caller must be `owner`.\n     * - the interest rate must not be too large.\n     * - the interest rate cannot be set to the same value.\n     */\n    function _setInterestRateLimitPerEpoch(uint256 _annualInterestRate) public onlyOwner {\n        uint256 _interestRateLimitPerEpoch = _annualInterestRate / EPOCH_PER_YEAR;\n        require(\n            _interestRateLimitPerEpoch <= EPOCH_INTEREST_RATE_MAX,\n            \"_setInterestRateLimitPerEpoch: Interest rate too large\"\n        );\n        require(\n            _interestRateLimitPerEpoch != interestRateLimitPerEpoch_,\n            \"_setInterestRateLimitPerEpoch: Cannot set the same value\"\n        );\n        interestRateLimitPerEpoch_ = _interestRateLimitPerEpoch;\n        emit SetInterestRateLimitPerEpoch(_interestRateLimitPerEpoch);\n    }\n\n    /**\n     * @notice Set the validator limit per epoch.\n     * @param _validatorLimitPerEpoch The validator limit per epoch\n     *\n     * Requirements:\n     * - the caller must be `owner`.\n     * - the validator limit cannot be set to the same value.\n     */\n    function _setValidatorLimitPerEpoch(uint256 _validatorLimitPerEpoch) public onlyOwner {\n        require(\n            _validatorLimitPerEpoch != validatorLimitPerEpoch_,\n            \"_setValidatorLimitPerEpoch: Cannot set the same value\"\n        );\n        validatorLimitPerEpoch_ = _validatorLimitPerEpoch;\n        emit SetValidatorLimitPerEpoch(_validatorLimitPerEpoch);\n    }\n\n    /**\n     * @notice Calculate the current epoch ID.\n     * @return The current epoch ID.\n     */\n    function _currentEpochId() internal view returns (uint256) {\n        // Calculate the current epoch ID based on the current block timestamp and the timestamp of the zero epoch\n        return (block.timestamp - ZERO_EPOCH_TIMESTAMP) / SECONDS_PER_EPOCH;\n    }\n\n    /**\n     * @notice Calculate the epoch interest rate.\n     * @param _epochCount The number of epochs\n     * @param _activatedValidatorCount The number of activated validators\n     * @param _rewardIncrement The reward increment\n     * @return The epoch interest rate\n     */\n    function _calculateEpochInterestRate(\n        uint256 _epochCount,\n        uint256 _activatedValidatorCount,\n        uint256 _rewardIncrement\n    ) internal pure returns (uint256) {\n        uint256 _principal = _epochCount * _activatedValidatorCount * DEPOSIT_SIZE;\n        return (_rewardIncrement * BASE + _principal - 1) / _principal;\n    }\n\n    /**\n     * @notice Update the epoch reward.\n     * @param _startEpochId The starting epoch ID\n     * @param _epochId The current epoch ID\n     * @param _activatedValidatorCount The number of activated validators\n     * @param _rewardIncrement The reward increment\n     *\n     * Requirements:\n     * - the active validators must not be 0.\n     * - the epoch ID must increase.\n     * - the epoch interest rate must be valid.\n     * - the validator limit must not be exceeded.\n     */\n    function _updateEpochReward(\n        uint256 _startEpochId,\n        uint256 _epochId,\n        uint256 _activatedValidatorCount,\n        uint256 _rewardIncrement\n    ) internal {\n        require(_activatedValidatorCount > 0, \"_updateEpochReward: Active validators must not be 0\");\n        require(_epochId <= _currentEpochId(), \"_updateEpochReward: Invalid epoch id\");\n\n        uint256 _lastEpochId = lastEpochId_;\n        require(_startEpochId == _lastEpochId, \"_updateEpochReward: Start epoch id must equal last epoch id\");\n        require(_epochId > _lastEpochId, \"_updateEpochReward: Epoch id must increase\");\n\n        uint256 _epochCount = _epochId - _lastEpochId;\n        uint256 _epochInterestRate = _calculateEpochInterestRate(\n            _epochCount,\n            _activatedValidatorCount,\n            _rewardIncrement\n        );\n        require(_epochInterestRate <= interestRateLimitPerEpoch_, \"_updateEpochReward: Invalid epoch interest rate\");\n\n        uint256 _lastActivatedValidatorCount = lastActivatedValidatorCount_;\n        if (_activatedValidatorCount > _lastActivatedValidatorCount) {\n            require(\n                (_activatedValidatorCount - _lastActivatedValidatorCount + _epochCount - 1) / _epochCount <=\n                    validatorLimitPerEpoch_,\n                \"_updateEpochReward: Validator out of increment per epoch\"\n            );\n        }\n\n        lastEpochId_ = _epochId;\n        lastActivatedValidatorCount_ = _activatedValidatorCount;\n        emit UpdateEpochReward(\n            _lastEpochId,\n            _epochId,\n            _lastActivatedValidatorCount,\n            _activatedValidatorCount,\n            _rewardIncrement\n        );\n    }\n\n    /**\n     * @notice Submit the epoch reward.\n     * @param _startEpochId The starting epoch ID\n     * @param _epochId The current epoch ID\n     * @param _activatedValidatorCount The number of activated validators\n     * @param _rewardIncrement The reward increment\n     *\n     * Requirements:\n     * - the function caller must be the `manager`.\n     * - the contract must not be paused.\n     */\n    function submitEpochReward(\n        uint256 _startEpochId,\n        uint256 _epochId,\n        uint256 _activatedValidatorCount,\n        uint256 _rewardIncrement\n    ) external whenNotPaused onlyManager {\n        _updateEpochReward(_startEpochId, _epochId, _activatedValidatorCount, _rewardIncrement);\n        CORE.supplyReward(_rewardIncrement);\n    }\n\n    /**\n     * @notice Get the CORE contract.\n     * @return The CORE contract.\n     */\n    function core() external view returns (ICore) {\n        return CORE;\n    }\n\n    /**\n     * @notice Get the zero epoch timestamp.\n     * @return The zero epoch timestamp.\n     */\n    function zeroEpochTimestamp() external view returns (uint256) {\n        return ZERO_EPOCH_TIMESTAMP;\n    }\n\n    /**\n     * @notice Get the interest rate limit per epoch.\n     * @return The interest rate limit per epoch.\n     */\n    function interestRateLimitPerEpoch() external view returns (uint256) {\n        return interestRateLimitPerEpoch_;\n    }\n\n    /**\n     * @notice Get the validator limit per epoch.\n     * @return The validator limit per epoch.\n     */\n    function validatorLimitPerEpoch() external view returns (uint256) {\n        return validatorLimitPerEpoch_;\n    }\n\n    /**\n     * @notice Get the last epoch ID.\n     * @return The last epoch ID.\n     */\n    function lastEpochId() external view returns (uint256) {\n        return lastEpochId_;\n    }\n\n    /**\n     * @notice Get the last activated validator count.\n     * @return The last activated validator count.\n     */\n    function lastActivatedValidatorCount() external view returns (uint256) {\n        return lastActivatedValidatorCount_;\n    }\n\n    /**\n     * @notice Get the current epoch ID.\n     * @return The current epoch ID.\n     */\n    function currentEpochId() external view returns (uint256) {\n        return _currentEpochId();\n    }\n\n    /**\n     * @notice Check if an address is a pause guardian.\n     * @param _pauseGuardian The address to check.\n     * @return True if the address is a pause guardian or the owner, false otherwise.\n     */\n    function isPauseGuardian(address _pauseGuardian) public view override returns (bool) {\n        return PauseGuardian.isPauseGuardian(_pauseGuardian) || _pauseGuardian == owner();\n    }\n}\n"
    },
    "contracts/saETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\";\n\nimport \"./library/PauseGuardian.sol\";\n\nimport \"./interface/IaETH.sol\";\n\n/**\n * @title Aspida's vault token for staked aETH\n * @dev saETH is a contract that represents a token for staked aETH.\n * It inherits from Ownable2StepUpgradeable, PauseGuardian, ERC20PermitUpgradeable, and ERC4626Upgradeable.\n * It has several internal variables and events that are used to keep track of the contract's state.\n * It also has several internal functions that are used to update the contract's state.\n */\ncontract saETH is Ownable2StepUpgradeable, PauseGuardian, ERC20PermitUpgradeable, ERC4626Upgradeable {\n    uint256 internal duration_;\n    uint256 internal rewardRate_;\n    uint256 internal periodFinish_;\n    uint256 internal lastUpdateTime_;\n\n    uint256 internal totalAssets_;\n\n    event SetDuration(uint256 duration);\n\n    event UpdateRewardRate(uint256 rewardRate);\n    event UpdatePeriodFinish(uint256 periodFinish);\n\n    event UpdateTotalAssets(uint256 totalAssets);\n    event UpdateLastUpdateTime(uint256 lastUpdateTime);\n\n    /**\n     * @dev Modifier that updates the reward and checks if a new reward is needed.\n     */\n    modifier sync() {\n        uint256 _timestamp = block.timestamp;\n        _updateReward(_timestamp);\n        if (_timestamp > periodFinish_) _newReward();\n        _;\n    }\n\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     */\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Initializes the saETH contract.\n     * @dev This function should be called only once to initialize saETH.\n     * It initializes the contract as Ownable, sets the name and symbol of the token, initializes the permit functionality, and sets the initial reward duration and period.\n     * @param _name The name of the token.\n     * @param _symbol The symbol of the token.\n     * @param _aETH The address of the aETH contract.\n     */\n    function initialize(string memory _name, string memory _symbol, IERC20Upgradeable _aETH) public initializer {\n        __Ownable2Step_init();\n        __Pausable_init();\n        __ERC20_init(_name, _symbol);\n        __ERC20Permit_init(_name);\n        __ERC4626_init(_aETH);\n        _setDurationInternal(1 weeks);\n        _updateReward(block.timestamp);\n        _updatePeriodFinish(1 weeks);\n    }\n\n    /**\n     * @dev Unpause when saETH is paused.\n     */\n    function _open() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @dev Pause saETH.\n     */\n    function _close() external onlyPauseGuardian {\n        _pause();\n    }\n\n    /**\n     * @dev Adds a pause guardian.\n     * @param _pauseGuardian The address of the pause guardian to add.\n     */\n    function _addPauseGuardian(address _pauseGuardian) external onlyOwner {\n        _addPauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @dev Removes a pause guardian.\n     * @param _pauseGuardian The address of the pause guardian to remove.\n     */\n    function _removePauseGuardian(address _pauseGuardian) external onlyOwner {\n        _removePauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @dev Sets the duration of the next reward period.\n     * @param _duration The duration of the reward period.\n     */\n    function _setDuration(uint256 _duration) external onlyOwner {\n        _setDurationInternal(_duration);\n    }\n\n    /**\n     * @dev Speeds up the reward distribution over a given duration.\n     * @param _reward The amount of the reward to distribute.\n     * @param _duration The duration over which to distribute the reward.\n     */\n    function _speedUpReward(uint256 _reward, uint256 _duration) external onlyOwner sync {\n        require(_duration > 0, \"_speedUpReward: Invalid duration\");\n        require(_reward <= _availableReward(), \"_speedUpReward: Invalid reward\");\n        _updateRewardRate(_reward, _duration);\n        _updatePeriodFinish(_duration);\n    }\n\n    /**\n     * @dev Sets the duration of the reward period.\n     * @param _duration The duration of the reward period.\n     */\n    function _setDurationInternal(uint256 _duration) internal {\n        require(_duration != duration_ && _duration > 0, \"_setDurationInternal: Invalid duration\");\n        duration_ = _duration;\n        emit SetDuration(_duration);\n    }\n\n    /**\n     * @dev Updates the reward rate.\n     * @param _rewardAmount The amount of the reward.\n     * @param _duration The duration of the reward period.\n     */\n    function _updateRewardRate(uint256 _rewardAmount, uint256 _duration) internal {\n        uint256 _rewardRate = _rewardAmount / _duration;\n        rewardRate_ = _rewardRate;\n        emit UpdateRewardRate(_rewardRate);\n    }\n\n    /**\n     * @dev Updates the period finish time.\n     * @param _duration The duration of the reward period.\n     */\n    function _updatePeriodFinish(uint256 _duration) internal {\n        uint256 _periodFinish = block.timestamp + _duration;\n        periodFinish_ = _periodFinish;\n        emit UpdatePeriodFinish(_periodFinish);\n    }\n\n    /**\n     * @dev Updates the reward.\n     * @param _timestamp The current timestamp.\n     */\n    function _updateReward(uint256 _timestamp) internal {\n        uint256 _totalAssets = _currentTotalAssets(_timestamp);\n        totalAssets_ = _totalAssets;\n        emit UpdateTotalAssets(_totalAssets);\n\n        lastUpdateTime_ = _timestamp;\n        emit UpdateLastUpdateTime(_timestamp);\n    }\n\n    /**\n     * @dev Starts a new reward period.\n     */\n    function _newReward() internal {\n        uint256 _duration = duration_;\n        _updateRewardRate(_availableReward(), _duration);\n        _updatePeriodFinish(_duration);\n    }\n\n    /**\n     * @dev Returns the available reward.\n     * @return The amount of available reward.\n     */\n    function _availableReward() internal view returns (uint256) {\n        return IERC20Upgradeable(asset()).balanceOf(address(this)) - totalAssets_;\n    }\n\n    /**\n     * @dev Calculates the current total assets.\n     * @param _timestamp The current timestamp.\n     * @return The current total assets.\n     */\n    function _currentTotalAssets(uint256 _timestamp) internal view returns (uint256) {\n        // If the total supply is 0, return 0\n        if (totalSupply() == 0) return 0;\n        // Otherwise, return the sum of total assets and the reward amount by time\n        return totalAssets_ + _rewardAmountByTime(_timestamp);\n    }\n\n    /**\n     * @dev Returns the update time.\n     * @param _timestamp The current timestamp.\n     */\n    function _getUpdateTime(uint256 _timestamp) internal view returns (uint256) {\n        return _timestamp < periodFinish_ ? _timestamp : periodFinish_;\n    }\n\n    /**\n     * @dev Returns the reward amount by time.\n     * @param _timestamp The current timestamp.\n     */\n    function _rewardAmountByTime(uint256 _timestamp) internal view returns (uint256 _rewardAmount) {\n        uint256 _updateTime = _getUpdateTime(_timestamp);\n        if (_updateTime > lastUpdateTime_) _rewardAmount = (_updateTime - lastUpdateTime_) * rewardRate_;\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer.\n     * @param from The address to transfer from.\n     * @param to The address to transfer to.\n     * @param amount The amount to transfer.\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override {\n        require(!paused(), \"_beforeTokenTransfer: token transfer while paused\");\n        super._beforeTokenTransfer(from, to, amount);\n    }\n\n    /**\n     * @dev Deposits assets and mints shares.\n     * @param _assets The amount of assets to deposit.\n     * @param _receiver The address to receive the shares.\n     */\n    function _deposit(address _caller, address _receiver, uint256 _assets, uint256 _shares) internal override {\n        super._deposit(_caller, _receiver, _assets, _shares);\n        totalAssets_ += _assets;\n    }\n\n    /**\n     * @dev Withdraws assets and burns shares.\n     * @param _assets The amount of assets to withdraw.\n     * @param _receiver The address to receive the assets.\n     * @param _owner The owner of the shares.\n     */\n    function _withdraw(\n        address _caller,\n        address _receiver,\n        address _owner,\n        uint256 _assets,\n        uint256 _shares\n    ) internal override {\n        totalAssets_ -= _assets;\n        super._withdraw(_caller, _receiver, _owner, _assets, _shares);\n    }\n\n    /**\n     * @dev Deposits assets and mints shares.\n     * @param _assets The amount of assets to deposit.\n     * @param _receiver The address to receive the shares.\n     */\n    function deposit(uint256 _assets, address _receiver) public override sync returns (uint256 _shares) {\n        return super.deposit(_assets, _receiver);\n    }\n\n    /**\n     * @dev Deposits assets and mints shares with permit.\n     * @param _assets The amount of assets to deposit.\n     * @param _receiver The address to receive the shares.\n     * @param _deadline The deadline for the permit.\n     * @param _approveMax Whether to approve the maximum amount.\n     * @param _v The v value of the permit signature.\n     * @param _r The r value of the permit signature.\n     * @param _s The s value of the permit signature.\n     */\n    function depositWithPermit(\n        uint256 _assets,\n        address _receiver,\n        uint256 _deadline,\n        bool _approveMax,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external returns (uint256) {\n        uint256 _amount = _approveMax ? type(uint256).max : _assets;\n        IaETH(asset()).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\n        return deposit(_assets, _receiver);\n    }\n\n    /**\n     * @dev Mints shares and deposits assets.\n     * @param _shares The amount of shares to mint.\n     * @param _receiver The address to receive the assets.\n     */\n    function mint(uint256 _shares, address _receiver) public override sync returns (uint256 _assets) {\n        return super.mint(_shares, _receiver);\n    }\n\n    /**\n     * @dev Withdraws assets and burns shares.\n     * @param _assets The amount of assets to withdraw.\n     * @param _receiver The address to receive the assets.\n     * @param _owner The owner of the shares.\n     */\n    function withdraw(\n        uint256 _assets,\n        address _receiver,\n        address _owner\n    ) public override sync returns (uint256 _shares) {\n        return super.withdraw(_assets, _receiver, _owner);\n    }\n\n    /**\n     * @dev Redeems shares and returns assets.\n     * @param _shares The amount of shares to redeem.\n     * @param _receiver The address to receive the assets.\n     * @param _owner The owner of the shares.\n     */\n    function redeem(uint256 _shares, address _receiver, address _owner) public override sync returns (uint256 _assets) {\n        return super.redeem(_shares, _receiver, _owner);\n    }\n\n    /**\n     * @dev Returns the duration of the reward period.\n     */\n    function duration() external view returns (uint256) {\n        return duration_;\n    }\n\n    /**\n     * @dev Returns the current reward rate.\n     */\n    function rewardRate() external view returns (uint256) {\n        return rewardRate_;\n    }\n\n    /**\n     * @dev Returns the end time of the current reward period.\n     */\n    function periodFinish() external view returns (uint256) {\n        return periodFinish_;\n    }\n\n    /**\n     * @dev Returns the last time the reward rate was updated.\n     */\n    function lastUpdateTime() external view returns (uint256) {\n        return lastUpdateTime_;\n    }\n\n    /**\n     * @dev Returns the available reward.\n     * @return The amount of available reward.\n     */\n    function availableReward() external view returns (uint256) {\n        return _availableReward();\n    }\n\n    /**\n     * @dev Returns the total assets in the pool, including any accrued rewards.\n     */\n    function totalAssets() public view override returns (uint256) {\n        return _currentTotalAssets(block.timestamp);\n    }\n\n    /**\n     * @dev Returns the number of decimals for the token.\n     */\n    function decimals() public view override(ERC20Upgradeable, ERC4626Upgradeable) returns (uint8) {\n        return ERC4626Upgradeable.decimals();\n    }\n\n    /**\n     * @dev Checks if an address is a pause guardian.\n     * @param _pauseGuardian The address to check.\n     * @return True if the address is a pause guardian, false otherwise.\n     */\n    function isPauseGuardian(address _pauseGuardian) public view override returns (bool) {\n        return PauseGuardian.isPauseGuardian(_pauseGuardian) || _pauseGuardian == owner();\n    }\n}\n"
    },
    "contracts/StETHMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\nimport \"./library/PauseGuardian.sol\";\nimport \"./strategy/model/aETHMinter.sol\";\n\nimport \"./interface/IaETH.sol\";\nimport \"./interface/ILido.sol\";\n\n/**\n * @title StETHMinter contract for Aspida's Lido\n * @author Aspida engineer\n */\ncontract StETHMinter is Ownable2StepUpgradeable, PauseGuardian, aETHMinter {\n    using TransferHelper for address;\n    address internal immutable STETH;\n\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     */\n    constructor(IaETH _aETH, address _stETH) aETHMinter(_aETH) {\n        STETH = _stETH;\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Initializes StETHMinter contract\n     * @dev Expects to call only once to initialize StETHMinter.\n     */\n    function initialize() public initializer {\n        __Ownable2Step_init();\n        _setReceiverInternal(address(this));\n    }\n\n    /**\n     * @notice Unpauses StETHMinter contract\n     * @dev Unpause when StETHMinter is paused.\n     */\n    function _open() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Pauses StETHMinter contract\n     * @dev Pause StETHMinter.\n     */\n    function _close() external onlyPauseGuardian {\n        _pause();\n    }\n\n    /**\n     * @notice Adds pause guardian\n     * @param _pauseGuardian Address of pause guardian to be added\n     */\n    function _addPauseGuardian(address _pauseGuardian) external onlyOwner {\n        _addPauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Removes pause guardian\n     * @param _pauseGuardian Address of pause guardian to be removed\n     */\n    function _removePauseGuardian(address _pauseGuardian) external onlyOwner {\n        _removePauseGuardianInternal(_pauseGuardian);\n    }\n\n    /**\n     * @notice Sets receiver address\n     * @param _receiver Address of receiver to be set\n     */\n    function _setReceiver(address _receiver) external onlyOwner {\n        _setReceiverInternal(_receiver);\n    }\n\n    /**\n     * @notice Transfers tokens to specified address\n     * @param _token Address of token to be transferred\n     * @param _amount Amount of tokens to be transferred\n     * @param _to Address of receiver\n     */\n    function _transferOut(address _token, uint256 _amount, address _to) external onlyOwner {\n        _token.safeTransfer(_to, _amount);\n    }\n\n    /**\n     * @notice Deposits StETH tokens\n     * @param _sender Address of sender\n     * @param _receiver Address of receiver\n     * @param _stETHAmount Amount of StETH tokens to be deposited\n     */\n    function _deposit(address _sender, address _receiver, uint256 _stETHAmount) internal override whenNotPaused {\n        super._deposit(_sender, _receiver, _stETHAmount);\n    }\n\n    /**\n     * @notice Converts StETH tokens to aETH tokens\n     * @param _stETHAmount Amount of StETH tokens to be converted\n     * @return uint256 Amount of aETH tokens\n     */\n    function _convertToAETH(uint256 _stETHAmount) internal pure override returns (uint256) {\n        return _stETHAmount;\n    }\n\n    /**\n     * @notice Returns address of StETH token\n     * @return address Address of StETH token\n     */\n    function _depositAsset() internal view override returns (address) {\n        return STETH;\n    }\n\n    /**\n     * @notice Deposits StETH tokens with permit\n     * @param _stETHAmount Amount of StETH tokens to be deposited\n     * @param _receiver Address of receiver\n     * @param _deadline Deadline for permit\n     * @param _approveMax Boolean indicating whether to approve max amount\n     * @param _v ECDSA signature parameter\n     * @param _r ECDSA signature parameter\n     * @param _s ECDSA signature parameter\n     */\n    function depositWithPermit(\n        uint256 _stETHAmount,\n        address _receiver,\n        uint256 _deadline,\n        bool _approveMax,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        uint256 _amount = _approveMax ? type(uint256).max : _stETHAmount;\n        IStETH(STETH).permit(msg.sender, address(this), _amount, _deadline, _v, _r, _s);\n        _deposit(msg.sender, _receiver, _stETHAmount);\n    }\n\n    /**\n     * @notice Checks if address is pause guardian\n     * @param _pauseGuardian Address to be checked\n     * @return bool Boolean indicating whether address is pause guardian\n     */\n    function isPauseGuardian(address _pauseGuardian) public view override returns (bool) {\n        return PauseGuardian.isPauseGuardian(_pauseGuardian) || _pauseGuardian == owner();\n    }\n\n    /**\n     * @notice Returns deposit cap\n     * @return uint256 Deposit cap\n     */\n    function depositCap() external view returns (uint256) {\n        return AETH.mintCap(address(this));\n    }\n\n    /**\n     * @notice Returns deposit amount\n     * @return uint256 Deposit amount\n     */\n    function depositAmount() external view returns (uint256) {\n        return AETH.mintAmount(address(this));\n    }\n}\n"
    },
    "contracts/strategy/model/aETHMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\nimport \"../../library/TransferHelper.sol\";\n\nimport \"../../interface/IaETH.sol\";\n\n/**\n * @title Aspida's lido's aETH minter model\n * @author Aspida engineer\n * @dev This contract is used to mint aETH tokens by depositing assets\n * @dev The contract is abstract and must be inherited by a child contract\n * @dev The child contract must implement the _convertToAETH and _depositAsset functions\n * @dev The child contract must also call the _setReceiverInternal function to set the receiver address\n */\nabstract contract aETHMinter {\n    using TransferHelper for address;\n\n    IaETH internal immutable AETH;\n\n    address internal receiver_; //internal variable to store the receiver address\n\n    /**\n     * @dev Emitted when the receiver address is set\n     */\n    event SetReceiver(address receiver);\n\n    constructor(IaETH _aETH) {\n        AETH = _aETH;\n    }\n\n    /**\n     * @dev Internal function to set the receiver address\n     * @param _receiver The address to set as the receiver\n     */\n    function _setReceiverInternal(address _receiver) internal {\n        require(_receiver != receiver_ && _receiver != address(0), \"_setReceiverInternal: Invalid receiver address\");\n        receiver_ = _receiver;\n        emit SetReceiver(_receiver);\n    }\n\n    /**\n     * @dev Internal function to deposit assets and mint aETH tokens\n     * @param _sender The address of the sender\n     * @param _receiver The address of the receiver\n     * @param _assetAmount The amount of assets to deposit\n     */\n    function _deposit(address _sender, address _receiver, uint256 _assetAmount) internal virtual {\n        address _to = receiver_;\n        address _asset = _depositAsset();\n        uint256 _beforeBalance = IERC20Upgradeable(_asset).balanceOf(_to);\n\n        _asset.safeTransferFrom(_sender, _to, _assetAmount);\n        AETH.minterMint(_receiver, _convertToAETH(IERC20Upgradeable(_asset).balanceOf(_to) - _beforeBalance));\n    }\n\n    /**\n     * @dev Internal function to convert the deposit asset amount to aETH tokens\n     * @param _assetAmount The amount of the deposit asset\n     * @return The amount of aETH tokens to mint\n     */\n    function _convertToAETH(uint256 _assetAmount) internal view virtual returns (uint256);\n\n    /**\n     * @dev Internal function to get the deposit asset address\n     * @return The address of the deposit asset\n     */\n    function _depositAsset() internal view virtual returns (address);\n\n    /**\n     * @dev External function to deposit assets and mint aETH tokens\n     * @param _assetAmount The amount of assets to deposit\n     */\n    function deposit(uint256 _assetAmount) external {\n        _deposit(msg.sender, msg.sender, _assetAmount);\n    }\n\n    /**\n     * @dev External function to deposit assets and mint aETH tokens\n     * @param _assetAmount The amount of assets to deposit\n     * @param _receiver The address of the receiver\n     */\n    function deposit(uint256 _assetAmount, address _receiver) external {\n        _deposit(msg.sender, _receiver, _assetAmount);\n    }\n\n    /**\n     * @dev External function to get the AETH token contract address\n     * @return The address of the AETH token contract\n     */\n    function aETH() external view returns (IaETH) {\n        return AETH;\n    }\n\n    /**\n     * @dev External function to get the receiver address\n     * @return The address of the receiver\n     */\n    function receiver() external view returns (address) {\n        return receiver_;\n    }\n\n    /**\n     * @dev External function to get the deposit asset address\n     * @return The address of the deposit asset\n     */\n    function depositAsset() external view returns (address) {\n        return _depositAsset();\n    }\n\n    /**\n     * @dev External function to convert the deposit asset amount to aETH tokens\n     * @param _assetAmount The amount of the deposit asset\n     * @return The amount of aETH tokens to mint\n     */\n    function convertToAETH(uint256 _assetAmount) external view returns (uint256) {\n        return _convertToAETH(_assetAmount);\n    }\n}\n"
    },
    "contracts/strategy/model/CurveModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"../../interface/ICurve.sol\";\n\n/**\n * @title Aspida's Curve model\n * @author Aspida engineer\n */\nabstract contract CurveModel {\n    ICurvePool internal immutable POOL;\n    uint256 internal immutable TOKENLENGTH;\n\n    /**\n     * @notice Initialize the address of the curve pool and other data.\n     */\n    constructor(ICurvePool _pool) {\n        POOL = _pool;\n        TOKENLENGTH = _pool.get_balances().length;\n    }\n\n    function pool() external view returns (ICurvePool) {\n        return POOL;\n    }\n\n    function tokens() external view returns (address[] memory _tokens) {\n        _tokens = new address[](TOKENLENGTH);\n        for (uint256 i = 0; i < TOKENLENGTH; i++) {\n            _tokens[i] = POOL.coins(i);\n        }\n    }\n}\n"
    },
    "contracts/strategy/model/LidoModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"../../interface/ILido.sol\";\n\n/**\n * @title Aspida's Lido model\n * @author Aspida engineer\n */\nabstract contract LidoModel {\n    IStETH internal immutable STETH;\n    address internal referral_;\n\n    event SetReferral(address referral);\n\n    /**\n     * @notice OInitialize the address of stETH.\n     */\n    constructor(IStETH _stETH) {\n        STETH = _stETH;\n    }\n\n    function _setReferralInternal(address _referral) internal {\n        require(_referral != referral_, \"_setReferralInternal: Invalid referral address\");\n        referral_ = _referral;\n        emit SetReferral(_referral);\n    }\n\n    function _withdrawalQueue() internal view returns (address) {\n        return STETH.getLidoLocator().withdrawalQueue();\n    }\n\n    function _getWithdrawalRequests(\n        ILidoWithdrawalQueueERC721 _lidoWithdrawalQueue,\n        address _owner\n    ) internal view returns (uint256[] memory) {\n        return _lidoWithdrawalQueue.getWithdrawalRequests(_owner);\n    }\n\n    function _findCheckpointHints(\n        ILidoWithdrawalQueueERC721 _lidoWithdrawalQueue,\n        uint256[] memory _requestsIds\n    ) internal view returns (uint256[] memory) {\n        return _lidoWithdrawalQueue.findCheckpointHints(_requestsIds, 1, _lidoWithdrawalQueue.getLastCheckpointIndex());\n    }\n\n    function _depositLido(uint256 _amount) internal returns (uint256) {\n        return STETH.getPooledEthByShares(STETH.submit{ value: _amount }(referral_));\n    }\n\n    function _requestWithdrawalsFromLido(uint256 _amount) internal returns (uint256[] memory) {\n        ILidoWithdrawalQueueERC721 _lidoWithdrawalQueue = ILidoWithdrawalQueueERC721(_withdrawalQueue());\n\n        STETH.approve(address(_lidoWithdrawalQueue), _amount);\n\n        uint256[] memory _amounts = new uint256[](1);\n        _amounts[0] = _amount;\n        return _lidoWithdrawalQueue.requestWithdrawals(_amounts, address(this));\n    }\n\n    function _claimWithdrawalsFromLido(address _receiver) internal {\n        ILidoWithdrawalQueueERC721 _lidoWithdrawalQueue = ILidoWithdrawalQueueERC721(_withdrawalQueue());\n        address _owner = address(this);\n        uint256[] memory _requestsIds = _getWithdrawalRequests(_lidoWithdrawalQueue, _owner);\n        _lidoWithdrawalQueue.claimWithdrawalsTo(\n            _requestsIds,\n            _findCheckpointHints(_lidoWithdrawalQueue, _requestsIds),\n            _receiver\n        );\n    }\n\n    function stETH() external view returns (IStETH) {\n        return STETH;\n    }\n\n    function referral() external view returns (address) {\n        return referral_;\n    }\n\n    function getWithdrawalRequests() external view returns (uint256[] memory) {\n        return _getWithdrawalRequests(ILidoWithdrawalQueueERC721(_withdrawalQueue()), address(this));\n    }\n\n    function findCheckpointHints() external view returns (uint256[] memory) {\n        ILidoWithdrawalQueueERC721 _lidoWithdrawalQueue = ILidoWithdrawalQueueERC721(_withdrawalQueue());\n        return _findCheckpointHints(_lidoWithdrawalQueue, _getWithdrawalRequests(_lidoWithdrawalQueue, address(this)));\n    }\n}\n"
    },
    "contracts/strategy/model/StrategyBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"../../interface/ICore.sol\";\nimport \"../../interface/IaETH.sol\";\n\n/**\n * @title Aspida's Strategy\n * @author Aspida engineer\n */\nabstract contract StrategyBase {\n    ICore internal immutable CORE;\n    IaETH internal immutable AETH;\n\n    constructor(ICore _core) {\n        CORE = _core;\n        AETH = IaETH(_core.aETH());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the core.\n     */\n    modifier onlyCore() {\n        require(address(CORE) == msg.sender, \"onlyCore: caller is not the core\");\n        _;\n    }\n\n    function strategyReceive() external payable virtual returns (uint256);\n\n    function aETH() external view virtual returns (IaETH) {\n        return AETH;\n    }\n\n    function core() external view virtual returns (ICore) {\n        return CORE;\n    }\n}\n"
    },
    "contracts/strategy/StrategyLido.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\n\nimport \"../library/Manable.sol\";\nimport \"../library/TransferHelper.sol\";\nimport \"./model/StrategyBase.sol\";\nimport \"./model/LidoModel.sol\";\n\n/**\n * @title Aspida's lido's strategy\n * @author Aspida engineer\n */\ncontract StrategyLido is Ownable2StepUpgradeable, Manable, StrategyBase, LidoModel {\n    using TransferHelper for address;\n\n    /**\n     * @notice Only for the implementation contract, as for the proxy pattern,\n     *            should call `initialize()` separately.\n     */\n    constructor(ICore _core, IStETH _lido) StrategyBase(_core) LidoModel(_lido) {\n        initialize();\n    }\n\n    /**\n     * @notice Expects to call only once to initialize LidoStrategy.\n     */\n    function initialize() public initializer {\n        __Ownable2Step_init();\n    }\n\n    function _addManager(address _manager) external onlyOwner {\n        _addManagerInternal(_manager);\n    }\n\n    function _removeManager(address _manager) external onlyOwner {\n        _removeManagerInternal(_manager);\n    }\n\n    function _setReferra(address _referral) external onlyOwner {\n        _setReferralInternal(_referral);\n    }\n\n    /**\n     * @notice This function allows governance to take unsupported tokens out of the\n     * contract, since this one exists longer than the other pools.\n     * This is in an effort to make someone whole, should they seriously\n     * mess up. There is no guarantee governance will vote to return these.\n     * It also allows for removal of airdropped tokens.\n     */\n    function _rescueTokens(address _token, uint256 _amount, address _to) external onlyOwner {\n        require(_token != address(STETH), \"_rescueTokens: Invalid Token\");\n        _token.safeTransfer(_to, _amount);\n    }\n\n    function strategyReceive() external payable override onlyCore returns (uint256) {\n        return _depositLido(msg.value);\n    }\n\n    function requestWithdrawals(uint256 _amount) external onlyManager returns (uint256[] memory) {\n        return _requestWithdrawalsFromLido(_amount);\n    }\n\n    function claimWithdrawals() external onlyManager {\n        _claimWithdrawalsFromLido(address(this));\n        CORE.receiveStrategyEarning{ value: address(this).balance }();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}