{
  "address": "0x46829739b6ff5d0869fF9d92E36409b2641a6D1E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Counterpart",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1AspidaERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2AspidaERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Escrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Closed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Deny",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "sequenceNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "Rely",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "seqNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TxToL2",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "exitNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalFinalized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "calculateL2TokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterpartGateway",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "deny",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "finalizeInboundTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "getOutboundCalldata",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "outboundCalldata",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inbox",
      "outputs": [
        {
          "internalType": "contract IInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l2Counterpart",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_inbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1AspidaERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2AspidaERC20",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Escrow",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOpen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1AspidaERC20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Escrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2AspidaERC20",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2Counterpart",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxGas",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasPriceBid",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "outboundTransfer",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "usr",
          "type": "address"
        }
      ],
      "name": "rely",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "wards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc51340358f31da6648e12596e5b5197e98a4ce4c573424ed28b8e5da72dbbc0a",
  "receipt": {
    "to": null,
    "from": "0x71e278B7Cbd1D57e96A477bbdd7F15b2E124c333",
    "contractAddress": "0x46829739b6ff5d0869fF9d92E36409b2641a6D1E",
    "transactionIndex": 93,
    "gasUsed": "1493491",
    "logsBloom": "0x
    "blockHash": "0x4b52234c91babafb181ef68e2cca08ae873c5a1ce05e74b430adab9c45a364e4",
    "transactionHash": "0xc51340358f31da6648e12596e5b5197e98a4ce4c573424ed28b8e5da72dbbc0a",
    "logs": [
      {
        "transactionIndex": 93,
        "blockNumber": 19381761,
        "transactionHash": "0xc51340358f31da6648e12596e5b5197e98a4ce4c573424ed28b8e5da72dbbc0a",
        "address": "0x46829739b6ff5d0869fF9d92E36409b2641a6D1E",
        "topics": [
          "0xdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a60",
          "0x00000000000000000000000071e278b7cbd1d57e96a477bbdd7f15b2e124c333"
        ],
        "data": "0x",
        "logIndex": 185,
        "blockHash": "0x4b52234c91babafb181ef68e2cca08ae873c5a1ce05e74b430adab9c45a364e4"
      }
    ],
    "blockNumber": 19381761,
    "cumulativeGasUsed": "9012882",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5f898DC62d699ecBeD578E4A9bEf46009EA8424b",
    "0x72Ce9c846789fdB6fC1f34aC4AD25Dd9ef7031ef",
    "0x4Dbd4fc535Ac27206064B68FfCf827b0A60BAB3f",
    "0xF1617882A71467534D14EEe865922de1395c9E89",
    "0xF1617882A71467534D14EEe865922de1395c9E89",
    "0x209056E9F655BE10d9c14B99b5005CbE84dF0eEE"
  ],
  "numDeployments": 1,
  "solcInputHash": "efada911f35c819298d910433fd20fac",
  "metadata": "{\"compiler\":{\"version\":\"0.6.11+commit.5ef660b1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1AspidaERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2AspidaERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Escrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Closed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"sequenceNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"seqNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TxToL2\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"exitNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalFinalized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"calculateL2TokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterpartGateway\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"finalizeInboundTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"getOutboundCalldata\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"outboundCalldata\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"contract IInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l2Counterpart\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_inbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1AspidaERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2AspidaERC20\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Escrow\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1AspidaERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2AspidaERC20\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2Counterpart\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasPriceBid\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"outboundTransfer\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/l1/L1AspidaERC20Gateway.sol\":\"L1AspidaERC20Gateway\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !Address.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x9abeffe138f098b16557187383ba0f9e8503602fa95cd668132986ee115237ed\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IBridge {\\n  event MessageDelivered(\\n    uint256 indexed messageIndex,\\n    bytes32 indexed beforeInboxAcc,\\n    address inbox,\\n    uint8 kind,\\n    address sender,\\n    bytes32 messageDataHash\\n  );\\n\\n  event BridgeCallTriggered(\\n    address indexed outbox,\\n    address indexed destAddr,\\n    uint256 amount,\\n    bytes data\\n  );\\n\\n  event InboxToggle(address indexed inbox, bool enabled);\\n\\n  event OutboxToggle(address indexed outbox, bool enabled);\\n\\n  function deliverMessageToInbox(\\n    uint8 kind,\\n    address sender,\\n    bytes32 messageDataHash\\n  ) external payable returns (uint256);\\n\\n  function executeCall(\\n    address destAddr,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool success, bytes memory returnData);\\n\\n  // These are only callable by the admin\\n  function setInbox(address inbox, bool enabled) external;\\n\\n  function setOutbox(address inbox, bool enabled) external;\\n\\n  // View functions\\n\\n  function activeOutbox() external view returns (address);\\n\\n  function allowedInboxes(address inbox) external view returns (bool);\\n\\n  function allowedOutboxes(address outbox) external view returns (bool);\\n\\n  function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n  function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x18666cb67f9de6bd3e57a943c3b911a170997c003858cfd9f5eed51a02678d36\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n  function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n  function sendUnsignedTransaction(\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    uint256 nonce,\\n    address destAddr,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (uint256);\\n\\n  function sendContractTransaction(\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    address destAddr,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (uint256);\\n\\n  function sendL1FundedUnsignedTransaction(\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    uint256 nonce,\\n    address destAddr,\\n    bytes calldata data\\n  ) external payable returns (uint256);\\n\\n  function sendL1FundedContractTransaction(\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    address destAddr,\\n    bytes calldata data\\n  ) external payable returns (uint256);\\n\\n  function createRetryableTicket(\\n    address destAddr,\\n    uint256 arbTxCallValue,\\n    uint256 maxSubmissionCost,\\n    address submissionRefundAddress,\\n    address valueRefundAddress,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes calldata data\\n  ) external payable returns (uint256);\\n\\n  function createRetryableTicketNoRefundAliasRewrite(\\n    address destAddr,\\n    uint256 arbTxCallValue,\\n    uint256 maxSubmissionCost,\\n    address submissionRefundAddress,\\n    address valueRefundAddress,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes calldata data\\n  ) external payable returns (uint256);\\n\\n  function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n  function bridge() external view returns (address);\\n\\n  function pauseCreateRetryables() external;\\n\\n  function unpauseCreateRetryables() external;\\n\\n  function startRewriteAddress() external;\\n\\n  function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x939a67153daf16be98b8fbcb17b6131ee3ae74aac11827804db5ef1d76c3c915\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IMessageProvider {\\n  event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n  event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x44a5c087fc027e3b043323f5c30eabaa543b16a00b7ca0b0033c988edb161610\",\"license\":\"Apache-2.0\"},\"contracts/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.6.11;\\n\\ninterface IOutbox {\\n  event OutboxEntryCreated(\\n    uint256 indexed batchNum,\\n    uint256 outboxEntryIndex,\\n    bytes32 outputRoot,\\n    uint256 numInBatch\\n  );\\n  event OutBoxTransactionExecuted(\\n    address indexed destAddr,\\n    address indexed l2Sender,\\n    uint256 indexed outboxEntryIndex,\\n    uint256 transactionIndex\\n  );\\n\\n  function l2ToL1Sender() external view returns (address);\\n\\n  function l2ToL1Block() external view returns (uint256);\\n\\n  function l2ToL1EthBlock() external view returns (uint256);\\n\\n  function l2ToL1Timestamp() external view returns (uint256);\\n\\n  function l2ToL1BatchNum() external view returns (uint256);\\n\\n  function l2ToL1OutputId() external view returns (bytes32);\\n\\n  function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths)\\n    external;\\n\\n  function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x588a364618b03dada030fdc43fb298198373cc208349c1e1fb13dc297d545853\",\"license\":\"Apache-2.0\"},\"contracts/l1/L1AspidaERC20Gateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Initializable.sol\\\";\\nimport \\\"./L1CrossDomainEnabled.sol\\\";\\nimport \\\"./L1ITokenGateway.sol\\\";\\nimport \\\"../l2/L2ITokenGateway.sol\\\";\\n\\ninterface IAspidaERC20 {\\n  function transferFrom(\\n    address _from,\\n    address _to,\\n    uint256 _value\\n  ) external returns (bool success);\\n}\\n\\ncontract L1AspidaERC20Gateway is Initializable, L1CrossDomainEnabled, L1ITokenGateway {\\n  // --- Auth ---\\n  mapping(address => uint256) public wards;\\n\\n  function rely(address usr) external auth {\\n    wards[usr] = 1;\\n    emit Rely(usr);\\n  }\\n\\n  function deny(address usr) external auth {\\n    wards[usr] = 0;\\n    emit Deny(usr);\\n  }\\n\\n  modifier auth() {\\n    require(wards[msg.sender] == 1, \\\"L1AspidaERC20Gateway/not-authorized\\\");\\n    _;\\n  }\\n\\n  event Rely(address indexed usr);\\n  event Deny(address indexed usr);\\n\\n  address public l1AspidaERC20;\\n  address public l2AspidaERC20;\\n  address public l1Escrow;\\n  address public l1Router;\\n  address public l2Counterpart;\\n  uint256 public isOpen;\\n\\n  event Closed();\\n\\n  constructor(\\n    address _l2Counterpart,\\n    address _l1Router,\\n    address _inbox,\\n    address _l1AspidaERC20,\\n    address _l2AspidaERC20,\\n    address _l1Escrow\\n  ) public {\\n    initialize(_l2Counterpart, _l1Router, _inbox, _l1AspidaERC20, _l2AspidaERC20, _l1Escrow);\\n  }\\n\\n  function initialize(\\n    address _l2Counterpart,\\n    address _l1Router,\\n    address _inbox,\\n    address _l1AspidaERC20,\\n    address _l2AspidaERC20,\\n    address _l1Escrow\\n  ) public initializer {\\n    isOpen = 1;\\n    wards[msg.sender] = 1;\\n    emit Rely(msg.sender);\\n\\n    l1AspidaERC20 = _l1AspidaERC20;\\n    l2AspidaERC20 = _l2AspidaERC20;\\n    l1Escrow = _l1Escrow;\\n    l1Router = _l1Router;\\n    l2Counterpart = _l2Counterpart;\\n\\n    __CrossDomainEnabled_init(_inbox);\\n  }\\n\\n  function close() external auth {\\n    isOpen = 0;\\n\\n    emit Closed();\\n  }\\n\\n  function outboundTransfer(\\n    address l1Token,\\n    address to,\\n    uint256 amount,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes calldata data\\n  ) external payable override returns (bytes memory) {\\n    // do not allow initiating new xchain messages if bridge is closed\\n    require(isOpen == 1, \\\"L1AspidaERC20Gateway/closed\\\");\\n    require(l1Token == l1AspidaERC20, \\\"L1AspidaERC20Gateway/token-not-AspidaERC20\\\");\\n\\n    // we use nested scope to avoid stack too deep errors\\n    address from;\\n    uint256 seqNum;\\n    bytes memory extraData;\\n    {\\n      uint256 maxSubmissionCost;\\n      (from, maxSubmissionCost, extraData) = parseOutboundData(data);\\n      // require(extraData.length == 0, \\\"L1AspidaERC20Gateway/call-hook-data-not-allowed\\\");\\n\\n      IAspidaERC20(l1Token).transferFrom(from, l1Escrow, amount);\\n\\n      bytes memory outboundCalldata = getOutboundCalldata(l1Token, from, to, amount, extraData);\\n      seqNum = sendTxToL2(\\n        l2Counterpart,\\n        from,\\n        maxSubmissionCost,\\n        maxGas,\\n        gasPriceBid,\\n        outboundCalldata\\n      );\\n    }\\n\\n    emit DepositInitiated(l1Token, from, to, seqNum, amount);\\n\\n    return abi.encode(seqNum);\\n  }\\n\\n  function getOutboundCalldata(\\n    address l1Token,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes memory data\\n  ) public pure returns (bytes memory outboundCalldata) {\\n    bytes memory emptyBytes = \\\"\\\";\\n\\n    outboundCalldata = abi.encodeWithSelector(\\n      L2ITokenGateway.finalizeInboundTransfer.selector,\\n      l1Token,\\n      from,\\n      to,\\n      amount,\\n      abi.encode(emptyBytes, data)\\n    );\\n\\n    return outboundCalldata;\\n  }\\n\\n  function finalizeInboundTransfer(\\n    address l1Token,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external override onlyL2Counterpart(l2Counterpart) {\\n    require(l1Token == l1AspidaERC20, \\\"L1AspidaERC20Gateway/token-not-AspidaERC20\\\");\\n    (uint256 exitNum, ) = abi.decode(data, (uint256, bytes));\\n\\n    IAspidaERC20(l1Token).transferFrom(l1Escrow, to, amount);\\n\\n    emit WithdrawalFinalized(l1Token, from, to, exitNum, amount);\\n  }\\n\\n  function parseOutboundData(bytes memory data)\\n    internal\\n    view\\n    returns (\\n      address from,\\n      uint256 maxSubmissionCost,\\n      bytes memory extraData\\n    )\\n  {\\n    if (msg.sender == l1Router) {\\n      // router encoded\\n      (from, extraData) = abi.decode(data, (address, bytes));\\n    } else {\\n      from = msg.sender;\\n      extraData = data;\\n    }\\n    // user encoded\\n    (maxSubmissionCost, extraData) = abi.decode(extraData, (uint256, bytes));\\n  }\\n\\n  function calculateL2TokenAddress(address l1Token) external view override returns (address) {\\n    if (l1Token != l1AspidaERC20) {\\n      return address(0);\\n    }\\n\\n    return l2AspidaERC20;\\n  }\\n\\n  function counterpartGateway() external view override returns (address) {\\n    return l2Counterpart;\\n  }\\n}\\n\",\"keccak256\":\"0x0d2a6d7736f259f938ab55d0bbf9a8bcaa02c17fe540ecf57d597e30019caa33\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/l1/L1CrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.6.11;\\n\\nimport \\\"../arbitrum/IBridge.sol\\\";\\nimport \\\"../arbitrum/IInbox.sol\\\";\\nimport \\\"../arbitrum/IOutbox.sol\\\";\\n\\nabstract contract L1CrossDomainEnabled {\\n  IInbox public inbox;\\n\\n  event TxToL2(address indexed from, address indexed to, uint256 indexed seqNum, bytes data);\\n\\n  function __CrossDomainEnabled_init(address _inbox) internal {\\n    inbox = IInbox(_inbox);\\n  }\\n\\n  modifier onlyL2Counterpart(address l2Counterpart) {\\n    // a message coming from the counterpart gateway was executed by the bridge\\n    address bridge = inbox.bridge();\\n    require(msg.sender == bridge, \\\"NOT_FROM_BRIDGE\\\");\\n\\n    // and the outbox reports that the L2 address of the sender is the counterpart gateway\\n    address l2ToL1Sender = IOutbox(IBridge(bridge).activeOutbox()).l2ToL1Sender();\\n    require(l2ToL1Sender == l2Counterpart, \\\"ONLY_COUNTERPART_GATEWAY\\\");\\n    _;\\n  }\\n\\n  function sendTxToL2(\\n    address target,\\n    address user,\\n    uint256 maxSubmissionCost,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes memory data\\n  ) internal returns (uint256) {\\n    uint256 seqNum = inbox.createRetryableTicket{value: msg.value}(\\n      target,\\n      0, // we always assume that l2CallValue = 0\\n      maxSubmissionCost,\\n      user,\\n      user,\\n      maxGas,\\n      gasPriceBid,\\n      data\\n    );\\n    emit TxToL2(user, target, seqNum, data);\\n    return seqNum;\\n  }\\n\\n  function sendTxToL2NoAliasing(\\n    address target,\\n    address user,\\n    uint256 l1CallValue,\\n    uint256 maxSubmissionCost,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes memory data\\n  ) internal returns (uint256) {\\n    uint256 seqNum = inbox.createRetryableTicketNoRefundAliasRewrite{value: l1CallValue}(\\n      target,\\n      0, // we always assume that l2CallValue = 0\\n      maxSubmissionCost,\\n      user,\\n      user,\\n      maxGas,\\n      gasPriceBid,\\n      data\\n    );\\n    emit TxToL2(user, target, seqNum, data);\\n    return seqNum;\\n  }\\n}\\n\",\"keccak256\":\"0xe9ae4b7e52c2798e190ea59db7e63038a01ed6f924271a48da61629509841664\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/l1/L1ITokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.6.11;\\n\\n// differences between L1 and L2 version of this interface:\\n// - payable modifier on outboundTransfer\\n// - events\\ninterface L1ITokenGateway {\\n  event DepositInitiated(\\n    address l1Token,\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed sequenceNumber,\\n    uint256 amount\\n  );\\n\\n  event WithdrawalFinalized(\\n    address l1Token,\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed exitNum,\\n    uint256 amount\\n  );\\n\\n  function outboundTransfer(\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes calldata data\\n  ) external payable returns (bytes memory);\\n\\n  function finalizeInboundTransfer(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  // if token is not supported this should return 0x0 address\\n  function calculateL2TokenAddress(address l1Token) external view returns (address);\\n\\n  // used by router\\n  function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xde3a4df1a4a39ae8c4ae11a5a9333d94aec474d73c7cef2068900e27e0f53629\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/l2/L2ITokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.6.11;\\n\\ninterface L2ITokenGateway {\\n  event DepositFinalized(\\n    address indexed l1Token,\\n    address indexed from,\\n    address indexed to,\\n    uint256 amount\\n  );\\n\\n  event WithdrawalInitiated(\\n    address l1Token,\\n    address indexed from,\\n    address indexed to,\\n    uint256 indexed l2ToL1Id,\\n    uint256 exitNum,\\n    uint256 amount\\n  );\\n\\n  function outboundTransfer(\\n    address token,\\n    address to,\\n    uint256 amount,\\n    uint256 maxGas,\\n    uint256 gasPriceBid,\\n    bytes calldata data\\n  ) external returns (bytes memory);\\n\\n  function finalizeInboundTransfer(\\n    address token,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  // if token is not supported this should return 0x0 address\\n  function calculateL2TokenAddress(address l1Token) external view returns (address);\\n\\n  // used by router\\n  function counterpartGateway() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcb0eeca7ec2592bc2f307ff03434d9b1b04dd8125d913ce36b9b1b9dc39c955c\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200190338038062001903833981810160405260c08110156200003757600080fd5b508051602082015160408301516060840151608085015160a0909501519394929391929091620000758686868686866001600160e01b036200008116565b5050505050506200022b565b600054610100900460ff1680620000a65750620000a66001600160e01b03620001dd16565b80620000b5575060005460ff16155b620000f25760405162461bcd60e51b815260040180806020018281038252602e815260200180620018d5602e913960400191505060405180910390fd5b600054610100900460ff161580156200011e576000805460ff1961ff0019909116610100171660011790555b600160078190553360008181526020839052604080822093909355915190917fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091a2600280546001600160a01b03199081166001600160a01b038781169190911790925560038054821686841617905560048054821685841617905560058054821689841617905560068054909116918916919091179055620001c185620001fb565b8015620001d4576000805461ff00191690555b50505050505050565b6000620001f5306200022560201b620011c61760201c565b15905090565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b3b151590565b61169a806200023b6000396000f3fe6080604052600436106100fd5760003560e01c80639b59a7a211610095578063bf353dbb11610064578063bf353dbb1461044f578063c0d13cf714610482578063cc2a9a5b14610497578063d2ce7d65146104f2578063fb0e722b1461058c576100fd565b80639b59a7a2146102865780639c52a7f11461029b578063a0c76a96146102ce578063a7e28d481461041c576100fd565b806343d726d6116100d157806343d726d61461020257806347535d7b1461021757806365fae35e1461023e5780638e7c8efe14610271576100fd565b80620cc9e6146101025780632db09c1c146101335780632e567b3614610148578063407395e0146101ed575b600080fd5b34801561010e57600080fd5b506101176105a1565b604080516001600160a01b039092168252519081900360200190f35b34801561013f57600080fd5b506101176105b0565b34801561015457600080fd5b506101eb600480360360a081101561016b57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b8111156101ad57600080fd5b8201836020820111156101bf57600080fd5b803590602001918460018302840111600160201b831117156101e057600080fd5b5090925090506105bf565b005b3480156101f957600080fd5b506101176109df565b34801561020e57600080fd5b506101eb6109ee565b34801561022357600080fd5b5061022c610a6d565b60408051918252519081900360200190f35b34801561024a57600080fd5b506101eb6004803603602081101561026157600080fd5b50356001600160a01b0316610a73565b34801561027d57600080fd5b50610117610b09565b34801561029257600080fd5b50610117610b18565b3480156102a757600080fd5b506101eb600480360360208110156102be57600080fd5b50356001600160a01b0316610b27565b3480156102da57600080fd5b506103a7600480360360a08110156102f157600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561033357600080fd5b82018360208201111561034557600080fd5b803590602001918460018302840111600160201b8311171561036657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bba945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103e15781810151838201526020016103c9565b50505050905090810190601f16801561040e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042857600080fd5b506101176004803603602081101561043f57600080fd5b50356001600160a01b0316610da2565b34801561045b57600080fd5b5061022c6004803603602081101561047257600080fd5b50356001600160a01b0316610dd5565b34801561048e57600080fd5b50610117610de7565b3480156104a357600080fd5b506101eb600480360360c08110156104ba57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a0013516610df6565b6103a7600480360360c081101561050857600080fd5b6001600160a01b0382358116926020810135909116916040820135916060810135916080820135919081019060c0810160a0820135600160201b81111561054e57600080fd5b82018360208201111561056057600080fd5b803590602001918460018302840111600160201b8311171561058157600080fd5b509092509050610f3f565b34801561059857600080fd5b506101176111b1565b6004546001600160a01b031681565b6006546001600160a01b031690565b60065460008054604080516373c6754960e11b815290516001600160a01b0394851694620100009093049092169163e78cea9291600480820192602092909190829003018186803b15801561061357600080fd5b505afa158015610627573d6000803e3d6000fd5b505050506040513d602081101561063d57600080fd5b50519050336001600160a01b03821614610690576040805162461bcd60e51b815260206004820152600f60248201526e4e4f545f46524f4d5f42524944474560881b604482015290519081900360640190fd5b6000816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d60208110156106f557600080fd5b505160408051634032458160e11b815290516001600160a01b03909216916380648b0291600480820192602092909190829003018186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d602081101561076357600080fd5b505190506001600160a01b03808216908416146107c7576040805162461bcd60e51b815260206004820152601860248201527f4f4e4c595f434f554e544552504152545f474154455741590000000000000000604482015290519081900360640190fd5b6002546001600160a01b038a81169116146108135760405162461bcd60e51b815260040180806020018281038252602a81526020018061163b602a913960400191505060405180910390fd5b60008585604081101561082557600080fd5b81359190810190604081016020820135600160201b81111561084657600080fd5b82018360208201111561085857600080fd5b803590602001918460018302840111600160201b8311171561087957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050509050896001600160a01b03166323b872dd600460009054906101000a90046001600160a01b03168a8a6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b5050604080516001600160a01b038c81168252602082018a905282518493828d1693928e16927f891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b3929081900390910190a450505050505050505050565b6005546001600160a01b031681565b3360009081526001602081905260409091205414610a3d5760405162461bcd60e51b81526004018080602001828103825260238152602001806116186023913960400191505060405180910390fd5b600060078190556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a9190a1565b60075481565b3360009081526001602081905260409091205414610ac25760405162461bcd60e51b81526004018080602001828103825260238152602001806116186023913960400191505060405180910390fd5b6001600160a01b038116600081815260016020819052604080832091909155517fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a609190a250565b6006546001600160a01b031681565b6003546001600160a01b031681565b3360009081526001602081905260409091205414610b765760405162461bcd60e51b81526004018080602001828103825260238152602001806116186023913960400191505060405180910390fd5b6001600160a01b038116600081815260016020526040808220829055517f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b9190a250565b606080604051806020016040528060008152509050632e567b3660e01b878787878588604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c21578181015183820152602001610c09565b50505050905090810190601f168015610c4e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610c81578181015183820152602001610c69565b50505050905090810190601f168015610cae5780820380516001836020036101000a031916815260200191505b5060408051601f19818403018152908290526001600160a01b03808c16602484019081528b82166044850152908a1660648401526084830189905260a060a48401908152825160c48501528251929850909650945060e4909101925060208601915080838360005b83811015610d2e578181015183820152602001610d16565b50505050905090810190601f168015610d5b5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909a1699909917909852509597505050505050505095945050505050565b6002546000906001600160a01b03838116911614610dc257506000610dd0565b506003546001600160a01b03165b919050565b60016020526000908152604090205481565b6002546001600160a01b031681565b600054610100900460ff1680610e0f5750610e0f6111cc565b80610e1d575060005460ff16155b610e585760405162461bcd60e51b815260040180806020018281038252602e8152602001806115ea602e913960400191505060405180910390fd5b600054610100900460ff16158015610e83576000805460ff1961ff0019909116610100171660011790555b600160078190553360008181526020839052604080822093909355915190917fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091a2600280546001600160a01b03199081166001600160a01b038781169190911790925560038054821686841617905560048054821685841617905560058054821689841617905560068054909116918916919091179055610f24856111dd565b8015610f36576000805461ff00191690555b50505050505050565b6060600754600114610f98576040805162461bcd60e51b815260206004820152601b60248201527f4c314173706964614552433230476174657761792f636c6f7365640000000000604482015290519081900360640190fd5b6002546001600160a01b03898116911614610fe45760405162461bcd60e51b815260040180806020018281038252602a81526020018061163b602a913960400191505060405180910390fd5b6000806060600061102a87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061120792505050565b8094508193508296505050508b6001600160a01b03166323b872dd85600460009054906101000a90046001600160a01b03168d6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b505050506040513d60208110156110ef57600080fd5b50606090506111018d868e8e87610bba565b60065490915061111e906001600160a01b031686848d8d866113d5565b93505050818a6001600160a01b0316846001600160a01b03167fb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e18e8d60405180836001600160a01b03166001600160a01b031681526020018281526020019250505060405180910390a4506040805160208082019390935281518082039093018352810190529998505050505050505050565b6000546201000090046001600160a01b031681565b3b151590565b60006111d7306111c6565b15905090565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60055460009081906060906001600160a01b03163314156112f85783806020019051604081101561123757600080fd5b815160208301805160405192949293830192919084600160201b82111561125d57600080fd5b90830190602082018581111561127257600080fd5b8251600160201b81118282018810171561128b57600080fd5b82525081516020918201929091019080838360005b838110156112b85781810151838201526020016112a0565b50505050905090810190601f1680156112e55780820380516001836020036101000a031916815260200191505b50604052509295509092506112fe915050565b50339150825b80806020019051604081101561131357600080fd5b815160208301805160405192949293830192919084600160201b82111561133957600080fd5b90830190602082018581111561134e57600080fd5b8251600160201b81118282018810171561136757600080fd5b82525081516020918201929091019080838360005b8381101561139457818101518382015260200161137c565b50505050905090810190601f1680156113c15780820380516001836020036101000a031916815260200191505b506040525095979296509094509092505050565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001888152602001878152602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114b257818101518382015260200161149a565b50505050905090810190601f1680156114df5780820380516001836020036101000a031916815260200191505b5099505050505050505050506020604051808303818588803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b50505050506040513d602081101561152f57600080fd5b5051604080516020808252865182820152865193945084936001600160a01b03808e1694908d16937fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0938a93919283929083019185019080838360005b838110156115a457818101518382015260200161158c565b50505050905090810190601f1680156115d15780820380516001836020036101000a031916815260200191505b509250505060405180910390a497965050505050505056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644c314173706964614552433230476174657761792f6e6f742d617574686f72697a65644c314173706964614552433230476174657761792f746f6b656e2d6e6f742d4173706964614552433230a264697066735822122075d38b17c25cc902a8d2feea9b78664bf8576921d95cd46366382f844d5cbf2764736f6c634300060b0033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x6080604052600436106100fd5760003560e01c80639b59a7a211610095578063bf353dbb11610064578063bf353dbb1461044f578063c0d13cf714610482578063cc2a9a5b14610497578063d2ce7d65146104f2578063fb0e722b1461058c576100fd565b80639b59a7a2146102865780639c52a7f11461029b578063a0c76a96146102ce578063a7e28d481461041c576100fd565b806343d726d6116100d157806343d726d61461020257806347535d7b1461021757806365fae35e1461023e5780638e7c8efe14610271576100fd565b80620cc9e6146101025780632db09c1c146101335780632e567b3614610148578063407395e0146101ed575b600080fd5b34801561010e57600080fd5b506101176105a1565b604080516001600160a01b039092168252519081900360200190f35b34801561013f57600080fd5b506101176105b0565b34801561015457600080fd5b506101eb600480360360a081101561016b57600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b8111156101ad57600080fd5b8201836020820111156101bf57600080fd5b803590602001918460018302840111600160201b831117156101e057600080fd5b5090925090506105bf565b005b3480156101f957600080fd5b506101176109df565b34801561020e57600080fd5b506101eb6109ee565b34801561022357600080fd5b5061022c610a6d565b60408051918252519081900360200190f35b34801561024a57600080fd5b506101eb6004803603602081101561026157600080fd5b50356001600160a01b0316610a73565b34801561027d57600080fd5b50610117610b09565b34801561029257600080fd5b50610117610b18565b3480156102a757600080fd5b506101eb600480360360208110156102be57600080fd5b50356001600160a01b0316610b27565b3480156102da57600080fd5b506103a7600480360360a08110156102f157600080fd5b6001600160a01b03823581169260208101358216926040820135909216916060820135919081019060a081016080820135600160201b81111561033357600080fd5b82018360208201111561034557600080fd5b803590602001918460018302840111600160201b8311171561036657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610bba945050505050565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103e15781810151838201526020016103c9565b50505050905090810190601f16801561040e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042857600080fd5b506101176004803603602081101561043f57600080fd5b50356001600160a01b0316610da2565b34801561045b57600080fd5b5061022c6004803603602081101561047257600080fd5b50356001600160a01b0316610dd5565b34801561048e57600080fd5b50610117610de7565b3480156104a357600080fd5b506101eb600480360360c08110156104ba57600080fd5b506001600160a01b038135811691602081013582169160408201358116916060810135821691608082013581169160a0013516610df6565b6103a7600480360360c081101561050857600080fd5b6001600160a01b0382358116926020810135909116916040820135916060810135916080820135919081019060c0810160a0820135600160201b81111561054e57600080fd5b82018360208201111561056057600080fd5b803590602001918460018302840111600160201b8311171561058157600080fd5b509092509050610f3f565b34801561059857600080fd5b506101176111b1565b6004546001600160a01b031681565b6006546001600160a01b031690565b60065460008054604080516373c6754960e11b815290516001600160a01b0394851694620100009093049092169163e78cea9291600480820192602092909190829003018186803b15801561061357600080fd5b505afa158015610627573d6000803e3d6000fd5b505050506040513d602081101561063d57600080fd5b50519050336001600160a01b03821614610690576040805162461bcd60e51b815260206004820152600f60248201526e4e4f545f46524f4d5f42524944474560881b604482015290519081900360640190fd5b6000816001600160a01b031663ab5d89436040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cb57600080fd5b505afa1580156106df573d6000803e3d6000fd5b505050506040513d60208110156106f557600080fd5b505160408051634032458160e11b815290516001600160a01b03909216916380648b0291600480820192602092909190829003018186803b15801561073957600080fd5b505afa15801561074d573d6000803e3d6000fd5b505050506040513d602081101561076357600080fd5b505190506001600160a01b03808216908416146107c7576040805162461bcd60e51b815260206004820152601860248201527f4f4e4c595f434f554e544552504152545f474154455741590000000000000000604482015290519081900360640190fd5b6002546001600160a01b038a81169116146108135760405162461bcd60e51b815260040180806020018281038252602a81526020018061163b602a913960400191505060405180910390fd5b60008585604081101561082557600080fd5b81359190810190604081016020820135600160201b81111561084657600080fd5b82018360208201111561085857600080fd5b803590602001918460018302840111600160201b8311171561087957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050509050896001600160a01b03166323b872dd600460009054906101000a90046001600160a01b03168a8a6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d602081101561098257600080fd5b5050604080516001600160a01b038c81168252602082018a905282518493828d1693928e16927f891afe029c75c4f8c5855fc3480598bc5a53739344f6ae575bdb7ea2a79f56b3929081900390910190a450505050505050505050565b6005546001600160a01b031681565b3360009081526001602081905260409091205414610a3d5760405162461bcd60e51b81526004018080602001828103825260238152602001806116186023913960400191505060405180910390fd5b600060078190556040517f1cdde67b72a90f19919ac732a437ac2f7a10fc128d28c2a6e525d89ce5cd9d3a9190a1565b60075481565b3360009081526001602081905260409091205414610ac25760405162461bcd60e51b81526004018080602001828103825260238152602001806116186023913960400191505060405180910390fd5b6001600160a01b038116600081815260016020819052604080832091909155517fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a609190a250565b6006546001600160a01b031681565b6003546001600160a01b031681565b3360009081526001602081905260409091205414610b765760405162461bcd60e51b81526004018080602001828103825260238152602001806116186023913960400191505060405180910390fd5b6001600160a01b038116600081815260016020526040808220829055517f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b9190a250565b606080604051806020016040528060008152509050632e567b3660e01b878787878588604051602001808060200180602001838103835285818151815260200191508051906020019080838360005b83811015610c21578181015183820152602001610c09565b50505050905090810190601f168015610c4e5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015610c81578181015183820152602001610c69565b50505050905090810190601f168015610cae5780820380516001836020036101000a031916815260200191505b5060408051601f19818403018152908290526001600160a01b03808c16602484019081528b82166044850152908a1660648401526084830189905260a060a48401908152825160c48501528251929850909650945060e4909101925060208601915080838360005b83811015610d2e578181015183820152602001610d16565b50505050905090810190601f168015610d5b5780820380516001836020036101000a031916815260200191505b5060408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909a1699909917909852509597505050505050505095945050505050565b6002546000906001600160a01b03838116911614610dc257506000610dd0565b506003546001600160a01b03165b919050565b60016020526000908152604090205481565b6002546001600160a01b031681565b600054610100900460ff1680610e0f5750610e0f6111cc565b80610e1d575060005460ff16155b610e585760405162461bcd60e51b815260040180806020018281038252602e8152602001806115ea602e913960400191505060405180910390fd5b600054610100900460ff16158015610e83576000805460ff1961ff0019909116610100171660011790555b600160078190553360008181526020839052604080822093909355915190917fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6091a2600280546001600160a01b03199081166001600160a01b038781169190911790925560038054821686841617905560048054821685841617905560058054821689841617905560068054909116918916919091179055610f24856111dd565b8015610f36576000805461ff00191690555b50505050505050565b6060600754600114610f98576040805162461bcd60e51b815260206004820152601b60248201527f4c314173706964614552433230476174657761792f636c6f7365640000000000604482015290519081900360640190fd5b6002546001600160a01b03898116911614610fe45760405162461bcd60e51b815260040180806020018281038252602a81526020018061163b602a913960400191505060405180910390fd5b6000806060600061102a87878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061120792505050565b8094508193508296505050508b6001600160a01b03166323b872dd85600460009054906101000a90046001600160a01b03168d6040518463ffffffff1660e01b815260040180846001600160a01b03166001600160a01b03168152602001836001600160a01b03166001600160a01b031681526020018281526020019350505050602060405180830381600087803b1580156110c557600080fd5b505af11580156110d9573d6000803e3d6000fd5b505050506040513d60208110156110ef57600080fd5b50606090506111018d868e8e87610bba565b60065490915061111e906001600160a01b031686848d8d866113d5565b93505050818a6001600160a01b0316846001600160a01b03167fb8910b9960c443aac3240b98585384e3a6f109fbf6969e264c3f183d69aba7e18e8d60405180836001600160a01b03166001600160a01b031681526020018281526020019250505060405180910390a4506040805160208082019390935281518082039093018352810190529998505050505050505050565b6000546201000090046001600160a01b031681565b3b151590565b60006111d7306111c6565b15905090565b600080546001600160a01b03909216620100000262010000600160b01b0319909216919091179055565b60055460009081906060906001600160a01b03163314156112f85783806020019051604081101561123757600080fd5b815160208301805160405192949293830192919084600160201b82111561125d57600080fd5b90830190602082018581111561127257600080fd5b8251600160201b81118282018810171561128b57600080fd5b82525081516020918201929091019080838360005b838110156112b85781810151838201526020016112a0565b50505050905090810190601f1680156112e55780820380516001836020036101000a031916815260200191505b50604052509295509092506112fe915050565b50339150825b80806020019051604081101561131357600080fd5b815160208301805160405192949293830192919084600160201b82111561133957600080fd5b90830190602082018581111561134e57600080fd5b8251600160201b81118282018810171561136757600080fd5b82525081516020918201929091019080838360005b8381101561139457818101518382015260200161137c565b50505050905090810190601f1680156113c15780820380516001836020036101000a031916815260200191505b506040525095979296509094509092505050565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663679b6ded348a60008a8c8d8c8c8c6040518a63ffffffff1660e01b815260040180896001600160a01b03166001600160a01b03168152602001888152602001878152602001866001600160a01b03166001600160a01b03168152602001856001600160a01b03166001600160a01b0316815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114b257818101518382015260200161149a565b50505050905090810190601f1680156114df5780820380516001836020036101000a031916815260200191505b5099505050505050505050506020604051808303818588803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b50505050506040513d602081101561152f57600080fd5b5051604080516020808252865182820152865193945084936001600160a01b03808e1694908d16937fc1d1490cf25c3b40d600dfb27c7680340ed1ab901b7e8f3551280968a3b372b0938a93919283929083019185019080838360005b838110156115a457818101518382015260200161158c565b50505050905090810190601f1680156115d15780820380516001836020036101000a031916815260200191505b509250505060405180910390a497965050505050505056fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644c314173706964614552433230476174657761792f6e6f742d617574686f72697a65644c314173706964614552433230476174657761792f746f6b656e2d6e6f742d4173706964614552433230a264697066735822122075d38b17c25cc902a8d2feea9b78664bf8576921d95cd46366382f844d5cbf2764736f6c634300060b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 116,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 119,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1890,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "inbox",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IInbox)1327"
      },
      {
        "astId": 1436,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "wards",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1496,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "l1AspidaERC20",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1498,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "l2AspidaERC20",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1500,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "l1Escrow",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1502,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "l1Router",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1504,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "l2Counterpart",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1506,
        "contract": "contracts/l1/L1AspidaERC20Gateway.sol:L1AspidaERC20Gateway",
        "label": "isOpen",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IInbox)1327": {
        "encoding": "inplace",
        "label": "contract IInbox",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}